/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { isNumber } from '../utils/util';
var ItemComponent = /** @class */ (function () {
    function ItemComponent() {
        /**
         * bind to [formatNumber], the flag for formatting the number
         */
        this.formatNumber = false;
        /**
         * bind to [itemClick] event, triggers when clicking the item of dropdown
         */
        this.itemClick = new EventEmitter();
        /**
         * bind to [checkStatusChange] event, triggers when check status is changed in checkbox mode.
         */
        this.checkStatusChange = new EventEmitter();
    }
    /**
     * check whether needs to format number for the provided text
     */
    /**
     * check whether needs to format number for the provided text
     * @param {?} value
     * @return {?}
     */
    ItemComponent.prototype.needFormatNumber = /**
     * check whether needs to format number for the provided text
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isNumber(value) && this.formatNumber;
    };
    /**
     * triggered when clicking the item, emits the [itemClick] event
     */
    /**
     * triggered when clicking the item, emits the [itemClick] event
     * @param {?} item
     * @return {?}
     */
    ItemComponent.prototype.onItemClick = /**
     * triggered when clicking the item, emits the [itemClick] event
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.itemClick.emit(item);
    };
    /**
     * triggered when checking status changed in checkbox mode, emits the [checkStatusChange] event
     */
    /**
     * triggered when checking status changed in checkbox mode, emits the [checkStatusChange] event
     * @param {?} item
     * @return {?}
     */
    ItemComponent.prototype.onCheckStatusChange = /**
     * triggered when checking status changed in checkbox mode, emits the [checkStatusChange] event
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.checkStatusChange.emit(item);
    };
    ItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'item',
                    template: "\n    <label [class.container-checkbox]=\"checkbox\"\n           [class.container-selection]=\"!checkbox && !item.selected\"\n           [class.container-selection-selected]=\"!checkbox && item.selected\"\n           [id]=\"item.id\" (mousedown)=\"onItemClick(item)\">\n      {{needFormatNumber(item.text)? (item.text | number:'1.0-2') : item.text}}{{suffixText? suffixText : ''}}\n      <ng-container *ngIf=\"checkbox\">\n        <input type='checkbox' [id]=\"'checkbox-'+item.text\" (change)=\"onCheckStatusChange(item)\" [checked]=\"item.selected\">\n        <span class=\"checkmark\" [id]=\"'checkmark-'+item.text\"></span>\n      </ng-container>\n    </label>",
                    styles: ["*,:after,:before{font-size:inherit;font-weight:inherit;font-family:inherit;box-sizing:inherit;background:inherit}.container-checkbox,.container-selection,.container-selection-selected,.dropdown-item{background:0 0;display:list-item;list-style:none;position:relative;width:100%;height:auto;cursor:pointer;color:#495057;padding-bottom:5px;padding-top:5px;padding-left:12px}.container-checkbox{padding-left:35px}.container-checkbox input{position:absolute;opacity:0;cursor:pointer}.container-checkbox .checkmark{position:absolute;top:5px;left:10px;height:15px;width:15px;border:1px solid rgba(0,0,0,.3);background-color:#fff;border-radius:4px}.container-checkbox .checkmark:after{content:\"\";position:absolute;display:none;left:5px;top:2px;width:4px;height:7px;border:solid #fff;border-width:0 2px 2px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.container-checkbox:hover input~.checkmark{background-color:#ccc}.container-checkbox input:checked~.checkmark{background-color:#2196f3;border:1px solid #2196f3}.container-checkbox input:checked~.checkmark:after{display:block}.container-checkbox:hover{color:#66afe9}.container-selection,.container-selection-selected{padding-left:12px}.container-selection-selected:hover,.container-selection:hover{color:#495057;background:#e0ffff}.container-selection-selected{color:#fff;background:#6495ed}"]
                }] }
    ];
    ItemComponent.propDecorators = {
        checkbox: [{ type: Input }],
        item: [{ type: Input }],
        formatNumber: [{ type: Input }],
        suffixText: [{ type: Input }],
        itemClick: [{ type: Output }],
        checkStatusChange: [{ type: Output }]
    };
    return ItemComponent;
}());
export { ItemComponent };
if (false) {
    /**
     * bind to [checkbox], the flag of checkbox mode
     * @type {?}
     */
    ItemComponent.prototype.checkbox;
    /**
     * bind to [item], the dropdown option item
     * @type {?}
     */
    ItemComponent.prototype.item;
    /**
     * bind to [formatNumber], the flag for formatting the number
     * @type {?}
     */
    ItemComponent.prototype.formatNumber;
    /**
     * bind to [suffixText], the suffixText that will be displayed in the dropdown
     * @type {?}
     */
    ItemComponent.prototype.suffixText;
    /**
     * bind to [itemClick] event, triggers when clicking the item of dropdown
     * @type {?}
     */
    ItemComponent.prototype.itemClick;
    /**
     * bind to [checkStatusChange] event, triggers when check status is changed in checkbox mode.
     * @type {?}
     */
    ItemComponent.prototype.checkStatusChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZHJvcGRvd24tbGlzdC8iLCJzb3VyY2VzIjpbInNyYy9uZ3gtZHJvcGRvd24tbGlzdC9pdGVtL2l0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJFLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFdkM7SUFBQTs7OztRQTRCVyxpQkFBWSxHQUFHLEtBQUssQ0FBQzs7OztRQVFwQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQzs7OztRQUl2QyxzQkFBaUIsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0lBc0IzRCxDQUFDO0lBcEJDOztPQUVHOzs7Ozs7SUFDSCx3Q0FBZ0I7Ozs7O0lBQWhCLFVBQWlCLEtBQVU7UUFDekIsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM5QyxDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNILG1DQUFXOzs7OztJQUFYLFVBQVksSUFBSTtRQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsMkNBQW1COzs7OztJQUFuQixVQUFvQixJQUFJO1FBQ3RCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Z0JBN0RGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsTUFBTTtvQkFDaEIsUUFBUSxFQUFFLDBwQkFVQzs7aUJBRVo7OzsyQkFNRSxLQUFLO3VCQUlMLEtBQUs7K0JBSUwsS0FBSzs2QkFJTCxLQUFLOzRCQUlMLE1BQU07b0NBSU4sTUFBTTs7SUFzQlQsb0JBQUM7Q0FBQSxBQTlERCxJQThEQztTQTlDWSxhQUFhOzs7Ozs7SUFJeEIsaUNBQTJCOzs7OztJQUkzQiw2QkFBNkI7Ozs7O0lBSTdCLHFDQUE4Qjs7Ozs7SUFJOUIsbUNBQTRCOzs7OztJQUk1QixrQ0FBaUQ7Ozs7O0lBSWpELDBDQUF5RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTZWxlY3Rpb25JdGVtfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2lzTnVtYmVyfSBmcm9tICcuLi91dGlscy91dGlsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXRlbScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGxhYmVsIFtjbGFzcy5jb250YWluZXItY2hlY2tib3hdPVwiY2hlY2tib3hcIlxuICAgICAgICAgICBbY2xhc3MuY29udGFpbmVyLXNlbGVjdGlvbl09XCIhY2hlY2tib3ggJiYgIWl0ZW0uc2VsZWN0ZWRcIlxuICAgICAgICAgICBbY2xhc3MuY29udGFpbmVyLXNlbGVjdGlvbi1zZWxlY3RlZF09XCIhY2hlY2tib3ggJiYgaXRlbS5zZWxlY3RlZFwiXG4gICAgICAgICAgIFtpZF09XCJpdGVtLmlkXCIgKG1vdXNlZG93bik9XCJvbkl0ZW1DbGljayhpdGVtKVwiPlxuICAgICAge3tuZWVkRm9ybWF0TnVtYmVyKGl0ZW0udGV4dCk/IChpdGVtLnRleHQgfCBudW1iZXI6JzEuMC0yJykgOiBpdGVtLnRleHR9fXt7c3VmZml4VGV4dD8gc3VmZml4VGV4dCA6ICcnfX1cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjaGVja2JveFwiPlxuICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIFtpZF09XCInY2hlY2tib3gtJytpdGVtLnRleHRcIiAoY2hhbmdlKT1cIm9uQ2hlY2tTdGF0dXNDaGFuZ2UoaXRlbSlcIiBbY2hlY2tlZF09XCJpdGVtLnNlbGVjdGVkXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiY2hlY2ttYXJrXCIgW2lkXT1cIidjaGVja21hcmstJytpdGVtLnRleHRcIj48L3NwYW4+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L2xhYmVsPmAsXG4gIHN0eWxlVXJsczogWycuL2l0ZW0uY29tcG9uZW50LnNjc3MnXVxufSlcblxuZXhwb3J0IGNsYXNzIEl0ZW1Db21wb25lbnQge1xuICAvKipcbiAgICogYmluZCB0byBbY2hlY2tib3hdLCB0aGUgZmxhZyBvZiBjaGVja2JveCBtb2RlXG4gICAqL1xuICBASW5wdXQoKSBjaGVja2JveDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIGJpbmQgdG8gW2l0ZW1dLCB0aGUgZHJvcGRvd24gb3B0aW9uIGl0ZW1cbiAgICovXG4gIEBJbnB1dCgpIGl0ZW06IFNlbGVjdGlvbkl0ZW07XG4gIC8qKlxuICAgKiBiaW5kIHRvIFtmb3JtYXROdW1iZXJdLCB0aGUgZmxhZyBmb3IgZm9ybWF0dGluZyB0aGUgbnVtYmVyXG4gICAqL1xuICBASW5wdXQoKSBmb3JtYXROdW1iZXIgPSBmYWxzZTtcbiAgLyoqXG4gICAqIGJpbmQgdG8gW3N1ZmZpeFRleHRdLCB0aGUgc3VmZml4VGV4dCB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBkcm9wZG93blxuICAgKi9cbiAgQElucHV0KCkgc3VmZml4VGV4dDogc3RyaW5nO1xuICAvKipcbiAgICogYmluZCB0byBbaXRlbUNsaWNrXSBldmVudCwgdHJpZ2dlcnMgd2hlbiBjbGlja2luZyB0aGUgaXRlbSBvZiBkcm9wZG93blxuICAgKi9cbiAgQE91dHB1dCgpIGl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICAvKipcbiAgICogYmluZCB0byBbY2hlY2tTdGF0dXNDaGFuZ2VdIGV2ZW50LCB0cmlnZ2VycyB3aGVuIGNoZWNrIHN0YXR1cyBpcyBjaGFuZ2VkIGluIGNoZWNrYm94IG1vZGUuXG4gICAqL1xuICBAT3V0cHV0KCkgY2hlY2tTdGF0dXNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAvKipcbiAgICogY2hlY2sgd2hldGhlciBuZWVkcyB0byBmb3JtYXQgbnVtYmVyIGZvciB0aGUgcHJvdmlkZWQgdGV4dFxuICAgKi9cbiAgbmVlZEZvcm1hdE51bWJlcih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB0aGlzLmZvcm1hdE51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiB0cmlnZ2VyZWQgd2hlbiBjbGlja2luZyB0aGUgaXRlbSwgZW1pdHMgdGhlIFtpdGVtQ2xpY2tdIGV2ZW50XG4gICAqL1xuICBvbkl0ZW1DbGljayhpdGVtKSB7XG4gICAgdGhpcy5pdGVtQ2xpY2suZW1pdChpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0cmlnZ2VyZWQgd2hlbiBjaGVja2luZyBzdGF0dXMgY2hhbmdlZCBpbiBjaGVja2JveCBtb2RlLCBlbWl0cyB0aGUgW2NoZWNrU3RhdHVzQ2hhbmdlXSBldmVudFxuICAgKi9cbiAgb25DaGVja1N0YXR1c0NoYW5nZShpdGVtKSB7XG4gICAgdGhpcy5jaGVja1N0YXR1c0NoYW5nZS5lbWl0KGl0ZW0pO1xuICB9XG59XG4iXX0=