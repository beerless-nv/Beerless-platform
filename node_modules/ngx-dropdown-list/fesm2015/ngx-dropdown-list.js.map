{"version":3,"file":"ngx-dropdown-list.js.map","sources":["ng://ngx-dropdown-list/src/ngx-dropdown-list/utils/util.ts","ng://ngx-dropdown-list/src/ngx-dropdown-list/dropdown-list.component.ts","ng://ngx-dropdown-list/src/ngx-dropdown-list/item/item.component.ts","ng://ngx-dropdown-list/src/ngx-dropdown-list/group-item/group-item.component.ts","ng://ngx-dropdown-list/src/ngx-dropdown-list/filter/input-filter.component.ts","ng://ngx-dropdown-list/src/ngx-dropdown-list/anchor/anchor.component.ts","ng://ngx-dropdown-list/src/ngx-dropdown-list/dropdown/dropdown.component.ts","ng://ngx-dropdown-list/src/ngx-dropdown-list/dropdown-list.module.ts"],"sourcesContent":["/**\r\n * check whether the provided items contains group\r\n */\r\nexport function hasGroup(items): boolean {\r\n  return items ? (items.find(item => item.group) != null) : false;\r\n}\r\n\r\n/**\r\n * clear all selections from the provide items.\r\n * @param items the dropdown items, can be group or item\r\n */\r\nexport function clearAllSelection(items: any): void {\r\n  if (hasGroup(items)) {\r\n    for (const groupItem of items) {\r\n      if (groupItem.items) {\r\n        groupItem.items.filter(item => item.selected).forEach(item => item.selected = false);\r\n      }\r\n    }\r\n  } else {\r\n    // clear the selection of previous selected item\r\n    items.filter(item => item.selected).forEach(item => item.selected = false);\r\n  }\r\n}\r\n\r\n/**\r\n * stop all propagation and default actions\r\n */\r\nexport function stopPropagationAndDefault(event: Event): void {\r\n  event.stopImmediatePropagation();\r\n  event.stopPropagation();\r\n  event.preventDefault();\r\n}\r\n\r\n/**\r\n * check whether the provided value is number of not\r\n */\r\nexport function isNumber(value: any): boolean {\r\n  return !(value == null || isNaN(value) || value.length === 0);\r\n}\r\n\r\n/**\r\n * get the selected item from the items list (including item and group)\r\n */\r\nexport function getFirstSelectedItem(items: any): any {\r\n  if (!items) {\r\n    return undefined;\r\n  }\r\n  let selectedItem;\r\n  if (hasGroup(items)) {\r\n    for (const item of items) {\r\n      selectedItem = item.items ? item.items.find(subItem => subItem.selected) : undefined;\r\n      if (selectedItem) {\r\n        break;\r\n      }\r\n    }\r\n  } else {\r\n    selectedItem = items ? items.find(item => item.selected) : undefined;\r\n  }\r\n  return selectedItem;\r\n}\r\n","import {Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {clearAllSelection, getFirstSelectedItem, stopPropagationAndDefault} from './utils/util';\n\n@Component({\n  selector: 'ngx-dropdown-list',\n  template: `\n    <span class=\"ngx-select\">\n        <anchor (anchorClick)=\"onAnchorClick($event)\" (clearanceClick)=\"onClearanceClick($event)\"\n                [checkbox]=\"multiSelection\"\n                [formatNumber]=\"formatNumber\"\n                [suffixText]=\"suffixText\"\n                [placeHolder]=\"placeHolder\"\n                [allowClear]=\"allowClear\"\n                [openStatus]=\"dropdownVisibility\"\n                [selectedText]=\"selectedText\"\n                [disabled]=\"disabled\">\n        </anchor>\n        <dropdown #dropdown (dropdownBlur) = \"onItemsBlur()\" (selectionChange)=\"onSelectionChange($event)\"\n                [items]=\"items\"\n                [checkbox]=\"multiSelection\"\n                [filterBox]=\"filterBox\"\n                [formatNumber]=\"formatNumber\"\n                [suffixText]=\"suffixText\"\n                [(selectedValue)]=\"selectedValue\"\n                (itemClick) = \"onItemClick()\"\n                [disabled]=\"disabled\">\n        </dropdown>\n    </span>\n  `,\n  styleUrls: ['./dropdown-list.component.scss'],\n})\n\nexport class DropdownListComponent {\n  @ViewChild('dropdown', { read: ElementRef }) dropdownRef: ElementRef;\n\n  /**\n   * bind to [placeHolder] for displaying the place holder string of the anchor.\n   */\n  @Input() placeHolder: string;\n  /**\n   * bind to [items] for the options/groups in the dropdown\n   */\n  @Input() items: any[];\n  /**\n   * bind to [multiSelection], the flag for multi-select (checkbox) mode.\n   */\n  @Input() multiSelection = false;\n  /**\n   * bind to [selectedValue] for the value of the selected option from dropdown\n   */\n  @Input() selectedValue: any;\n  /**\n   * bind to [filterBox] for displaying the filter input text box\n   */\n  @Input() filterBox = false;\n  /**\n   * bind to [suffixText] for displaying the suffix of the selected text of anchor\n   */\n  @Input() suffixText: string;\n  /**\n   * bind to [disabled] for disabling the dropdown\n   */\n  @Input() disabled: boolean;\n  /**\n   * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)\n   */\n  @Input() allowClear = true;\n  /**\n   * bind to [formatNumber] for show formatted number text\n   */\n  @Input() formatNumber = false;\n  /**\n   * for 2-way binding of [selectedValue], using async event to\n   * prevent \"ExpressionChangedAfterItHasBeenCheckedError\".\n   */\n  @Output() selectedValueChange = new EventEmitter<string>(true);\n  /**\n   * [selectionChange] event that will be triggered when changing of the selection.\n   * Using async event to prevent \"ExpressionChangedAfterItHasBeenCheckedError\".\n   */\n  @Output() selectionChange = new EventEmitter<any>(true);\n\n  /**\n   * visibility flag of drop down\n   */\n  dropdownVisibility = false;\n\n  /**\n   * current selected text\n   */\n  get selectedText(): any {\n    if (!this.multiSelection) {\n      const selectedItem = getFirstSelectedItem(this.items);\n      return selectedItem ? selectedItem.text : undefined;\n    }\n  }\n\n  /**\n   * triggered with (selectionChange) event, emits (selectedValueChange) and (selectionChange)\n   */\n  onSelectionChange(event) {\n    this.selectedValueChange.emit(event);\n    this.selectionChange.emit(event);\n  }\n\n  /**\n   * triggered with (anchorClick) event, controlling the \"open\" and \"close\" of the dropdown\n   */\n  onAnchorClick(event: Event): void {\n    if (this.disabled) {\n      stopPropagationAndDefault(event);\n      return;\n    }\n    if (this._isSelectionOpen()) {\n      this._hideItemList();\n    } else {\n      this._showItemsList();\n    }\n    stopPropagationAndDefault(event);\n  }\n\n  /**\n   * triggered with (itemClick) event, closes the dropdown in non-checkbox mode\n   */\n  onItemClick(): void {\n    if (!this.multiSelection) {\n      this._hideItemList();\n    }\n  }\n\n  /**\n   * triggered with (clearanceClick) event, clearing all selections\n   * and emits (selectedValueChange) and (selectionChange) event for empty value\n   */\n  onClearanceClick(event: Event): void {\n    if (!this.multiSelection) {\n      this.selectedValue = void 0;\n      this.selectedValueChange.emit(undefined);\n      this.selectionChange.emit(undefined);\n      clearAllSelection(this.items);\n    }\n    stopPropagationAndDefault(event);\n  }\n\n  /**\n   * triggered with (dropdownBlur) event, closes the dropdown\n   */\n  onItemsBlur(): void {\n    if (this._isSelectionOpen()) {\n      this._hideItemList();\n    }\n  }\n\n  /**\n   * close the dropdown\n   */\n  private _hideItemList(): void {\n    // hide the dropdown element (has some problem for using CSS directly, using this as a workaround)\n    this._dropdownElement.classList.remove('visible');\n    this._dropdownElement.style.display = 'none';\n    this.dropdownVisibility = false;\n  }\n\n  /**\n   * open the dropdown\n   */\n  private _showItemsList(): void {\n    // display the dropdown element (has some problem for using CSS directly, using this as a workaround)\n    this._dropdownElement.classList.add('visible');\n    this._dropdownElement.style.display = 'block';\n\n    this.dropdownVisibility = true;\n\n    // scrolling to the selected item\n    if (this._selectedElement) {\n      this._selectedElement.scrollIntoView({ behavior: 'instant', block: 'center' });\n    }\n\n    // setting the focus\n    if (this.filterBox && !this.multiSelection) {\n      this._filterInputElement.focus();\n    } else {\n      this._dropdownElement.focus();\n    }\n  }\n\n  /**\n   * visibility status of dropdown\n   */\n  private _isSelectionOpen(): boolean {\n    return this.dropdownVisibility;\n  }\n\n  /**\n   * get the real dropdown element (for focusing and visibility controlling), the <span> not the <dropdown>\n   */\n  private get _dropdownElement(): any {\n    return this.dropdownRef ? this.dropdownRef.nativeElement ? this.dropdownRef.nativeElement.firstElementChild : null : null;\n  }\n\n  /**\n   * get the real filter element (for focusing), the <input> not the <input-filter>\n   */\n  private get _filterInputElement(): any {\n    return this._dropdownElement ?\n      this._dropdownElement.firstElementChild ? this._dropdownElement.firstElementChild.firstElementChild : null : null;\n  }\n\n  /**\n   * get the HTMLElement of selected item, for doing (scrollIntoView) scrolling to the selected item\n   */\n  private get _selectedElement(): HTMLElement {\n    const selectedItem = getFirstSelectedItem(this.items);\n    return selectedItem ? document.getElementById(selectedItem.id) as HTMLElement : undefined;\n  }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {SelectionItem} from '../types';\nimport {isNumber} from '../utils/util';\n\n@Component({\n  selector: 'item',\n  template: `\n    <label [class.container-checkbox]=\"checkbox\"\n           [class.container-selection]=\"!checkbox && !item.selected\"\n           [class.container-selection-selected]=\"!checkbox && item.selected\"\n           [id]=\"item.id\" (mousedown)=\"onItemClick(item)\">\n      {{needFormatNumber(item.text)? (item.text | number:'1.0-2') : item.text}}{{suffixText? suffixText : ''}}\n      <ng-container *ngIf=\"checkbox\">\n        <input type='checkbox' [id]=\"'checkbox-'+item.text\" (change)=\"onCheckStatusChange(item)\" [checked]=\"item.selected\">\n        <span class=\"checkmark\" [id]=\"'checkmark-'+item.text\"></span>\n      </ng-container>\n    </label>`,\n  styleUrls: ['./item.component.scss']\n})\n\nexport class ItemComponent {\n  /**\n   * bind to [checkbox], the flag of checkbox mode\n   */\n  @Input() checkbox: boolean;\n  /**\n   * bind to [item], the dropdown option item\n   */\n  @Input() item: SelectionItem;\n  /**\n   * bind to [formatNumber], the flag for formatting the number\n   */\n  @Input() formatNumber = false;\n  /**\n   * bind to [suffixText], the suffixText that will be displayed in the dropdown\n   */\n  @Input() suffixText: string;\n  /**\n   * bind to [itemClick] event, triggers when clicking the item of dropdown\n   */\n  @Output() itemClick = new EventEmitter<string>();\n  /**\n   * bind to [checkStatusChange] event, triggers when check status is changed in checkbox mode.\n   */\n  @Output() checkStatusChange = new EventEmitter<string>();\n\n  /**\n   * check whether needs to format number for the provided text\n   */\n  needFormatNumber(value: any): boolean {\n    return isNumber(value) && this.formatNumber;\n  }\n\n  /**\n   * triggered when clicking the item, emits the [itemClick] event\n   */\n  onItemClick(item) {\n    this.itemClick.emit(item);\n  }\n\n  /**\n   * triggered when checking status changed in checkbox mode, emits the [checkStatusChange] event\n   */\n  onCheckStatusChange(item) {\n    this.checkStatusChange.emit(item);\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {SelectionGroupItems} from '../types';\n\n@Component({\n  selector: 'group-item',\n  template: `\n    <label class=\"dropdown-item dropdown-item-group\" (mousedown)=\"onItemGroupClick($event)\">{{item.group}}</label>\n  `,\n  styleUrls: ['./group-item.component.scss']\n})\n\nexport class GroupItemComponent {\n  /**\n   * bind to [item], the group item of dropdown\n   */\n  @Input() item: SelectionGroupItems;\n\n  /**\n   * prevent all clicking event from happening\n   */\n  onItemGroupClick(event) {\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'input-filter',\n  template: `\n    <input type=\"text\" class=\"filter-box\" [(ngModel)]=\"filterValue\" (input)=\"onChange()\" (blur)=\"onFilterTextBlur($event)\">\n  `,\n  styleUrls: ['./input-filter.component.scss']\n})\n\nexport class InputFilterComponent {\n  /**\n   * bind to [filterValue], the value of the filter\n   */\n  @Input() filterValue: string;\n  /**\n   * bind to [inputFilterBlur], emits with (blur) of filter input box\n   */\n  @Output() inputFilterBlur = new EventEmitter<string>();\n  /**\n   * bind to [filterValueChange], for 2-way binding of filterValue\n   */\n  @Output() filterValueChange = new EventEmitter<string>();\n\n  /**\n   * triggers with (blur) event, emits the (inputFilterBlur) event\n   */\n  onFilterTextBlur(event) {\n    this.inputFilterBlur.emit(event);\n  }\n\n  /**\n   * triggers with (input) event, emits the (filterValueChange) event for 2-way binding of filterValue\n   */\n  onChange() {\n    this.filterValueChange.emit(this.filterValue);\n  }\n}\n","import {Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {stopPropagationAndDefault, isNumber} from '../utils/util';\nimport {DecimalPipe} from '@angular/common';\n\n@Component({\n  selector: 'anchor',\n  template: `\n    <span #anchor tabindex=\"2\" [ngClass]=\"anchorClass\" (window:resize)=\"onResize()\"\n          (mousedown)=\"onAnchorClick($event)\" (blur)=\"onAnchorBlur($event)\"> {{anchorDisplayText}}\n      <span #selectionClearance class=\"selection-clearance\" (mousedown)=\"onClearanceClick($event)\" *ngIf=\"showClearanceFlag\">&times;</span>\n    </span>\n  `,\n  styleUrls: ['./anchor.component.scss'],\n  providers: [DecimalPipe]\n})\n\nexport class AnchorComponent {\n  /**\n   * Child element reference of anchor\n   */\n  @ViewChild('anchor', { read: ElementRef }) anchorRef: ElementRef;\n\n  /**\n   * bind to [placeHolder] for displaying the place holder string of the anchor.\n   */\n  @Input() placeHolder: string;\n  /**\n   * bind to [checkbox] for checking whether the clearance flag should be shown or not.\n   */\n  @Input() checkbox = false;\n  /**\n   * bind to [suffixText] for displaying the suffix of the selected text of anchor\n   */\n  @Input() suffixText: string;\n  /**\n   * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)\n   */\n  @Input() allowClear = true;\n  /**\n   * bind to [formatNumber] for show formatted number text\n   */\n  @Input() formatNumber: boolean;\n  /**\n   * bind to [selectedText] for displaying the selected text on anchor\n   */\n  @Input() selectedText: any;\n  /**\n   * bind to [openStatus], it's the visibility status of dropdown, for showing the arrow on anchor\n   */\n  @Input() openStatus = false;\n  /**\n   * bind to [disabled] for disabling the anchor\n   */\n  @Input() disabled = false;\n  /**\n   * will be triggered when clicking the anchor\n   */\n  @Output() anchorClick = new EventEmitter<any>();\n  /**\n   * will be triggered when clicking the clearance\n   */\n  @Output() clearanceClick = new EventEmitter<any>();\n\n  /**\n   * length of anchor element, used for calculate the string length of the anchor displayed text.\n   */\n  anchorLength: number;\n\n  constructor(private _decimalPipe: DecimalPipe) {}\n\n  /**\n   * flag for showing the clearance flag\n   */\n  get showClearanceFlag(): boolean {\n    return !this.checkbox && this.selectedText && this.allowClear;\n  }\n\n  /**\n   * the text displays on anchor\n   */\n  get anchorDisplayText(): string {\n    let anchorDisplayText =  this.selectedText ? (this.formatNumber ? (isNumber(this.selectedText) ?\n      this._decimalPipe.transform(this.selectedText, '1.0-2') : this.selectedText) :\n      this.selectedText) + (this.suffixText ? this.suffixText : '') : this.placeHolder;\n\n    let charLength = 1;\n    if (this.showClearanceFlag && this.anchorLength > 0) {\n      charLength = Math.floor((this.anchorLength - 50) / 7);\n    } else {\n      charLength = Math.floor((this.anchorLength - 50) / 7);\n    }\n\n    if (anchorDisplayText.length > charLength) {\n      anchorDisplayText = anchorDisplayText.slice(0, charLength - 2) + '...';\n    }\n    return anchorDisplayText;\n  }\n\n  /**\n   * anchor CSS class\n   */\n  get anchorClass(): string {\n    let anchorClassStatusPart;\n    let anchorClassFontColor;\n    if (this.disabled) {\n      anchorClassStatusPart = 'selection-anchor-disabled';\n      anchorClassFontColor = 'place-holder';\n    } else {\n      if (this.openStatus) {\n        anchorClassStatusPart = 'selection-anchor-open';\n      } else {\n        anchorClassStatusPart = 'selection-anchor-close';\n      }\n      if (this.selectedText != null) {\n        anchorClassFontColor = 'selected-item';\n      } else {\n        anchorClassFontColor = 'place-holder';\n      }\n    }\n    return `${anchorClassStatusPart} ${anchorClassFontColor}`;\n  }\n\n  /**\n   * triggered when clicking the anchor\n   */\n  onAnchorClick(event: Event): void {\n    this.anchorClick.emit(event);\n  }\n\n  /**\n   * triggered with (blur) of anchor\n   */\n  onAnchorBlur(event: Event): void {\n    stopPropagationAndDefault(event);\n  }\n\n  /**\n   * triggered when clicking the clearance\n   */\n  onClearanceClick(event: Event): void {\n    this.clearanceClick.emit(event);\n  }\n\n  /**\n   * triggered when resizing, get the clientWidth of anchor\n   */\n  onResize() {\n    this.anchorLength = this.anchorRef ? this.anchorRef.nativeElement ? this.anchorRef.nativeElement.clientWidth : 0 : 0;\n  }\n}\n","import {Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {clearAllSelection, getFirstSelectedItem, hasGroup, stopPropagationAndDefault} from '../utils/util';\n\n@Component({\n  selector: 'dropdown',\n  template: `\n    <span #dropdown class=\"dropdown\" tabindex=\"3\" (mousedown)=\"onItemsClick($event)\" (blur)=\"onItemsBlur($event)\" *ngIf=\"!disabled\" >\n      <input-filter #filterInput tabindex=\"4\" *ngIf=\"filterBox && !checkbox\" [(filterValue)]=\"filterValue\" (inputFilterBlur)=\"onFilterTextBlur($event)\"></input-filter>\n      <span #selectionOptions [ngClass]=\"optionsClass\">\n        <ng-container *ngFor=\"let item of itemsValues\" >\n          <ng-container *ngIf=\"item && item.group\">\n            <group-item [item]=\"item\"></group-item>\n            <item *ngFor=\"let subItem of item.items\" (itemClick)=\"onItemClick(subItem)\" (checkStatusChange)=\"toggleSelection(subItem)\"\n                  [item]=\"subItem\" [checkbox]=\"checkbox\" [formatNumber]=\"formatNumber\" [suffixText]=\"suffixText\">\n            </item>\n          </ng-container>\n          <ng-container *ngIf=\"item && !item.group\">\n            <item (itemClick)=\"onItemClick(item)\" (checkStatusChange)=\"toggleSelection(item)\"\n                  [item]=\"item\" [checkbox]=\"checkbox\" [formatNumber]=\"formatNumber\" [suffixText]=\"suffixText\">\n            </item>\n          </ng-container>\n        </ng-container>\n      </span>\n    </span>\n  `,\n  styleUrls: ['./dropdown.component.scss']\n})\n\nexport class DropdownComponent implements OnChanges {\n  /**\n   * Child element reference of dropdown\n   */\n  @ViewChild('dropdown', { read: ElementRef }) dropdownRef: ElementRef;\n  /**\n   * Child element reference of filter input text\n   */\n  @ViewChild('filterInput', { read: ElementRef }) filterInputRef: ElementRef;\n  /**\n   * bind to [placeHolder] for displaying the place holder string of the anchor.\n   */\n  @Input() placeHolder: string;\n  /**\n   * bind to [items] for the options/groups in the dropdown\n   */\n  @Input() items: any[];\n  /**\n   * bind to [checkbox], the flag for multi-select (checkbox) mode.\n   */\n  @Input() checkbox = false;\n  /**\n   * bind to [selectedValue] for the value of the selected option from dropdown\n   */\n  @Input() selectedValue: any;\n  /**\n   * bind to [filterBox] for displaying the filter input text box\n   */\n  @Input() filterBox = false;\n  /**\n   * bind to [suffixText] for displaying the suffix of the selected text of anchor\n   */\n  @Input() suffixText: string;\n  /**\n   * bind to [disabled] for disabling the dropdown\n   */\n  @Input() disabled: boolean;\n  /**\n   * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)\n   */\n  @Input() allowClear = true;\n  /**\n   * bind to [formatNumber] for show formatted number text\n   */\n  @Input() formatNumber = false;\n  /**\n   * for 2-way binding of [selectedValue]\n   */\n  @Output() selectedValueChange = new EventEmitter<string>(true);\n  /**\n   * [selectionChange] event that will be triggered when changing of the selection\n   */\n  @Output() selectionChange = new EventEmitter<any>(true);\n  /**\n   * [dropdownBlur] event that will be triggered with (blur) of dropdown\n   */\n  @Output() dropdownBlur = new EventEmitter<any>();\n  /**\n   * [itemClick] event that will be triggered when clicking the option of dropdown\n   */\n  @Output() itemClick = new EventEmitter<any>();\n  /**\n   * filter value\n   */\n  filterValue: string;\n  /**\n   * flag of clicking dropdown. It's to prevent (blur) of dropdown from happening in checkbox mode.\n   */\n  private _clickedItems = false;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.items) {\n      this._checkSelectionChange(changes.items.previousValue, changes.items.currentValue);\n    }\n  }\n\n  /**\n   * triggered when clicking the dropdown\n   */\n  onItemsClick(event: any): void {\n    if (event.offsetX > (event.target.clientWidth + event.target.clientLeft)) {\n      stopPropagationAndDefault(event);\n      return;\n    }\n    // should ignore clicking on filter\n    if (this.checkbox && event.target.type !== 'text') {\n      this._clickedItems = true;\n    }\n  }\n\n  /**\n   * triggered when clicking the item\n   */\n  onItemClick(currentItem): void {\n    if (!this.checkbox) {\n      this.selectedValue = this._getItemValue(currentItem); // currentItem.value != null ? currentItem.value : currentItem.text;\n      clearAllSelection(this.items);\n      // set the selection of current one\n      currentItem.selected = true;\n      this.itemClick.emit(currentItem);\n      this._onSelectionChange(this.selectedValue);\n    }\n  }\n\n  /**\n   * triggers with (blur) event of filter input box\n   */\n  onFilterTextBlur(event): void {\n    this.dropdownBlur.emit(event);\n  }\n\n  /**\n   * triggers with (blur) event of dropdown\n   */\n  onItemsBlur(event): void {\n    if (this.checkbox) {\n      if (this._clickedItems) {\n        // in checkbox mode, this blur event will be ignored when clicking the dropdown (check the checkbox)\n        event.target.focus();\n        this._clickedItems = false;\n        return;\n      }\n    }\n    this.dropdownBlur.emit(event);\n  }\n\n  /**\n   * toggle the selection when checking status changed (in checkbox mode)\n   */\n  toggleSelection(item: {id: string, value?: any, text: any, selected?: boolean}): void {\n    item.selected = !item.selected;\n    this.selectionChange.emit(this._getItemValue(item)); // item.value != null ? item.value : item.text);\n  }\n\n  /**\n   * items values list after applying the filter\n   */\n  get itemsValues(): any[] {\n    let filter;\n    if (this.filterValue) {\n      filter = this.filterValue.toUpperCase();\n    }\n\n    if (filter == null) {\n      return this.items;\n    }\n    if (!this.items || this.items.length === 0) {\n      return [];\n    }\n    if (hasGroup(this.items)) {\n      const items = [];\n      this.items.forEach(groupItem => {\n        if (groupItem.group != null && groupItem.group.toString().toUpperCase().includes(filter)) {\n          // if groupItem contains the filters, the groupItem needs to be displayed as well\n          items.push(groupItem);\n        } else {\n          const filteredItems = groupItem.items.filter(item => item.text != null && item.text.toString().toUpperCase().includes(filter));\n          if (filteredItems && filteredItems.length > 0) {\n            items.push({group: groupItem.group, items: filteredItems});\n          }\n        }\n      });\n      return items;\n    } else {\n      return this.items.filter(item => (item.text != null && item.text.toString().toUpperCase().includes(filter)));\n    }\n  }\n  /**\n   * options CSS class\n   */\n  get optionsClass(): string {\n    if (this.filterBox && !this.checkbox) {\n      return 'options with-filter';\n    } else {\n      return 'options no-filter';\n    }\n  }\n\n  /**\n   * get item value. Return text if value is not available\n   */\n  private _getItemValue(item): any {\n    return item ? item.value != null ? item.value : item.text : undefined;\n  }\n\n  /**\n   * selection changed, emits events: (selectedValueChange) and (selectionChange);\n   */\n  private _onSelectionChange(value) {\n    this.selectedValueChange.emit(value);\n    this.selectionChange.emit(value);\n  }\n\n  /**\n   * check whether the selection is changed. Emits relative events when if changed.\n   */\n  private _checkSelectionChange(previousValue, currentValue) {\n    const curSelectedItem = getFirstSelectedItem(currentValue);\n    const lastSelectedItem = getFirstSelectedItem(previousValue);\n    const curSelectedItemId = curSelectedItem ? curSelectedItem.id : undefined;\n    const lastSelectedItemId = lastSelectedItem ? lastSelectedItem.id : undefined;\n    if (curSelectedItemId !== lastSelectedItemId && !this.checkbox) {\n      this._onSelectionChange(this._getItemValue(curSelectedItem));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ItemComponent } from './item/item.component';\r\nimport { GroupItemComponent } from './group-item/group-item.component';\r\nimport { InputFilterComponent } from './filter/input-filter.component';\r\nimport { AnchorComponent } from './anchor/anchor.component';\r\nimport { DropdownComponent } from './dropdown/dropdown.component';\r\nimport { DropdownListComponent } from './dropdown-list.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DropdownListComponent,\r\n    ItemComponent,\r\n    GroupItemComponent,\r\n    InputFilterComponent,\r\n    AnchorComponent,\r\n    DropdownComponent\r\n  ],\r\n  exports: [ DropdownListComponent],\r\n  imports: [ CommonModule, FormsModule ],\r\n  providers: [],\r\n  bootstrap: [],\r\n})\r\nexport class DropdownListModule {}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;AAGA,SAAgB,QAAQ,CAAC,KAAK;IAC5B,OAAO,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC;CACjE;;;;;;AAMD,SAAgB,iBAAiB,CAAC,KAAU;IAC1C,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,KAAK,MAAM,SAAS,IAAI,KAAK,EAAE;YAC7B,IAAI,SAAS,CAAC,KAAK,EAAE;gBACnB,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;aACtF;SACF;KACF;SAAM;;QAEL,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;KAC5E;CACF;;;;;;AAKD,SAAgB,yBAAyB,CAAC,KAAY;IACpD,KAAK,CAAC,wBAAwB,EAAE,CAAC;IACjC,KAAK,CAAC,eAAe,EAAE,CAAC;IACxB,KAAK,CAAC,cAAc,EAAE,CAAC;CACxB;;;;;;AAKD,SAAgB,QAAQ,CAAC,KAAU;IACjC,OAAO,EAAE,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;CAC/D;;;;;;AAKD,SAAgB,oBAAoB,CAAC,KAAU;IAC7C,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,SAAS,CAAC;KAClB;;QACG,YAAY;IAChB,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;YACrF,IAAI,YAAY,EAAE;gBAChB,MAAM;aACP;SACF;KACF;SAAM;QACL,YAAY,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;KACtE;IACD,OAAO,YAAY,CAAC;CACrB;;;;;;AC3DD,MAgCa,qBAAqB;IA7BlC;;;;QA2CW,mBAAc,GAAG,KAAK,CAAC;;;;QAQvB,cAAS,GAAG,KAAK,CAAC;;;;QAYlB,eAAU,GAAG,IAAI,CAAC;;;;QAIlB,iBAAY,GAAG,KAAK,CAAC;;;;;QAKpB,wBAAmB,GAAG,IAAI,YAAY,CAAS,IAAI,CAAC,CAAC;;;;;QAKrD,oBAAe,GAAG,IAAI,YAAY,CAAM,IAAI,CAAC,CAAC;;;;QAKxD,uBAAkB,GAAG,KAAK,CAAC;KAkI5B;;;;;IA7HC,IAAI,YAAY;QACd,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;;kBAClB,YAAY,GAAG,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC;YACrD,OAAO,YAAY,GAAG,YAAY,CAAC,IAAI,GAAG,SAAS,CAAC;SACrD;KACF;;;;;;IAKD,iBAAiB,CAAC,KAAK;QACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC;;;;;;IAKD,aAAa,CAAC,KAAY;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,yBAAyB,CAAC,KAAK,CAAC,CAAC;YACjC,OAAO;SACR;QACD,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;YAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;aAAM;YACL,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;QACD,yBAAyB,CAAC,KAAK,CAAC,CAAC;KAClC;;;;;IAKD,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;KACF;;;;;;;IAMD,gBAAgB,CAAC,KAAY;QAC3B,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACzC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACrC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,yBAAyB,CAAC,KAAK,CAAC,CAAC;KAClC;;;;;IAKD,WAAW;QACT,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;YAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;KACF;;;;;;IAKO,aAAa;;QAEnB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAC7C,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;KACjC;;;;;;IAKO,cAAc;;QAEpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAE9C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;;QAG/B,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;SAChF;;QAGD,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YAC1C,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;SAClC;aAAM;YACL,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;SAC/B;KACF;;;;;;IAKO,gBAAgB;QACtB,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAChC;;;;;;IAKD,IAAY,gBAAgB;QAC1B,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,iBAAiB,GAAG,IAAI,GAAG,IAAI,CAAC;KAC3H;;;;;;IAKD,IAAY,mBAAmB;QAC7B,OAAO,IAAI,CAAC,gBAAgB;YAC1B,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,iBAAiB,GAAG,IAAI,GAAG,IAAI,CAAC;KACrH;;;;;;IAKD,IAAY,gBAAgB;;cACpB,YAAY,GAAG,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC;QACrD,OAAO,YAAY,sBAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC,KAAkB,SAAS,CAAC;KAC3F;;;YAnNF,SAAS,SAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;GAuBT;;aAEF;;;0BAGE,SAAS,SAAC,UAAU,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;0BAK1C,KAAK;oBAIL,KAAK;6BAIL,KAAK;4BAIL,KAAK;wBAIL,KAAK;yBAIL,KAAK;uBAIL,KAAK;yBAIL,KAAK;2BAIL,KAAK;kCAKL,MAAM;8BAKN,MAAM;;;;;;;AChFT,MAoBa,aAAa;IAhB1B;;;;QA4BW,iBAAY,GAAG,KAAK,CAAC;;;;QAQpB,cAAS,GAAG,IAAI,YAAY,EAAU,CAAC;;;;QAIvC,sBAAiB,GAAG,IAAI,YAAY,EAAU,CAAC;KAsB1D;;;;;;IAjBC,gBAAgB,CAAC,KAAU;QACzB,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;KAC7C;;;;;;IAKD,WAAW,CAAC,IAAI;QACd,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC3B;;;;;;IAKD,mBAAmB,CAAC,IAAI;QACtB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnC;;;YA7DF,SAAS,SAAC;gBACT,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE;;;;;;;;;;aAUC;;aAEZ;;;uBAME,KAAK;mBAIL,KAAK;2BAIL,KAAK;yBAIL,KAAK;wBAIL,MAAM;gCAIN,MAAM;;;;;;;AC5CT,MAWa,kBAAkB;;;;;;IAS7B,gBAAgB,CAAC,KAAK;QACpB,KAAK,CAAC,wBAAwB,EAAE,CAAC;QACjC,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;YArBF,SAAS,SAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,QAAQ,EAAE;;GAET;;aAEF;;;mBAME,KAAK;;;;;;;ACfR,MAUa,oBAAoB;IARjC;;;;QAgBY,oBAAe,GAAG,IAAI,YAAY,EAAU,CAAC;;;;QAI7C,sBAAiB,GAAG,IAAI,YAAY,EAAU,CAAC;KAe1D;;;;;;IAVC,gBAAgB,CAAC,KAAK;QACpB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC;;;;;IAKD,QAAQ;QACN,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC/C;;;YAlCF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,QAAQ,EAAE;;GAET;;aAEF;;;0BAME,KAAK;8BAIL,MAAM;gCAIN,MAAM;;;;;;;ACtBT,MAgBa,eAAe;;;;IAoD1B,YAAoB,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;;;;QAvCpC,aAAQ,GAAG,KAAK,CAAC;;;;QAQjB,eAAU,GAAG,IAAI,CAAC;;;;QAYlB,eAAU,GAAG,KAAK,CAAC;;;;QAInB,aAAQ,GAAG,KAAK,CAAC;;;;QAIhB,gBAAW,GAAG,IAAI,YAAY,EAAO,CAAC;;;;QAItC,mBAAc,GAAG,IAAI,YAAY,EAAO,CAAC;KAOF;;;;;IAKjD,IAAI,iBAAiB;QACnB,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC;KAC/D;;;;;IAKD,IAAI,iBAAiB;;YACf,iBAAiB,GAAI,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;YAC5F,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,YAAY;YAC3E,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW;;YAE9E,UAAU,GAAG,CAAC;QAClB,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,EAAE;YACnD,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;SACvD;aAAM;YACL,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;SACvD;QAED,IAAI,iBAAiB,CAAC,MAAM,GAAG,UAAU,EAAE;YACzC,iBAAiB,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;SACxE;QACD,OAAO,iBAAiB,CAAC;KAC1B;;;;;IAKD,IAAI,WAAW;;YACT,qBAAqB;;YACrB,oBAAoB;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,qBAAqB,GAAG,2BAA2B,CAAC;YACpD,oBAAoB,GAAG,cAAc,CAAC;SACvC;aAAM;YACL,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,qBAAqB,GAAG,uBAAuB,CAAC;aACjD;iBAAM;gBACL,qBAAqB,GAAG,wBAAwB,CAAC;aAClD;YACD,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC7B,oBAAoB,GAAG,eAAe,CAAC;aACxC;iBAAM;gBACL,oBAAoB,GAAG,cAAc,CAAC;aACvC;SACF;QACD,OAAO,GAAG,qBAAqB,IAAI,oBAAoB,EAAE,CAAC;KAC3D;;;;;;IAKD,aAAa,CAAC,KAAY;QACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;;;;;;IAKD,YAAY,CAAC,KAAY;QACvB,yBAAyB,CAAC,KAAK,CAAC,CAAC;KAClC;;;;;;IAKD,gBAAgB,CAAC,KAAY;QAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACjC;;;;;IAKD,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;KACtH;;;YAhJF,SAAS,SAAC;gBACT,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE;;;;;GAKT;gBAED,SAAS,EAAE,CAAC,WAAW,CAAC;;aACzB;;;;YAZO,WAAW;;;wBAkBhB,SAAS,SAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;0BAKxC,KAAK;uBAIL,KAAK;yBAIL,KAAK;yBAIL,KAAK;2BAIL,KAAK;2BAIL,KAAK;yBAIL,KAAK;uBAIL,KAAK;0BAIL,MAAM;6BAIN,MAAM;;;;;;;AC7DT,MA4Ba,iBAAiB;IAzB9B;;;;QA6CW,aAAQ,GAAG,KAAK,CAAC;;;;QAQjB,cAAS,GAAG,KAAK,CAAC;;;;QAYlB,eAAU,GAAG,IAAI,CAAC;;;;QAIlB,iBAAY,GAAG,KAAK,CAAC;;;;QAIpB,wBAAmB,GAAG,IAAI,YAAY,CAAS,IAAI,CAAC,CAAC;;;;QAIrD,oBAAe,GAAG,IAAI,YAAY,CAAM,IAAI,CAAC,CAAC;;;;QAI9C,iBAAY,GAAG,IAAI,YAAY,EAAO,CAAC;;;;QAIvC,cAAS,GAAG,IAAI,YAAY,EAAO,CAAC;;;;QAQtC,kBAAa,GAAG,KAAK,CAAC;KAyI/B;;;;;IAvIC,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;SACrF;KACF;;;;;;IAKD,YAAY,CAAC,KAAU;QACrB,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YACxE,yBAAyB,CAAC,KAAK,CAAC,CAAC;YACjC,OAAO;SACR;;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;YACjD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC3B;KACF;;;;;;IAKD,WAAW,CAAC,WAAW;QACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACrD,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;YAE9B,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACjC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC7C;KACF;;;;;;IAKD,gBAAgB,CAAC,KAAK;QACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC/B;;;;;;IAKD,WAAW,CAAC,KAAK;QACf,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,IAAI,CAAC,aAAa,EAAE;;gBAEtB,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACrB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;gBAC3B,OAAO;aACR;SACF;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC/B;;;;;;IAKD,eAAe,CAAC,IAA8D;QAC5E,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;KACrD;;;;;IAKD,IAAI,WAAW;;YACT,MAAM;QACV,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;SACzC;QAED,IAAI,MAAM,IAAI,IAAI,EAAE;YAClB,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1C,OAAO,EAAE,CAAC;SACX;QACD,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;kBAClB,KAAK,GAAG,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS;gBAC1B,IAAI,SAAS,CAAC,KAAK,IAAI,IAAI,IAAI,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;;oBAExF,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACvB;qBAAM;;0BACC,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC9H,IAAI,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC7C,KAAK,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,aAAa,EAAC,CAAC,CAAC;qBAC5D;iBACF;aACF,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;SACd;aAAM;YACL,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC9G;KACF;;;;;IAID,IAAI,YAAY;QACd,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACpC,OAAO,qBAAqB,CAAC;SAC9B;aAAM;YACL,OAAO,mBAAmB,CAAC;SAC5B;KACF;;;;;;;IAKO,aAAa,CAAC,IAAI;QACxB,OAAO,IAAI,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;KACvE;;;;;;;IAKO,kBAAkB,CAAC,KAAK;QAC9B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC;;;;;;;;IAKO,qBAAqB,CAAC,aAAa,EAAE,YAAY;;cACjD,eAAe,GAAG,oBAAoB,CAAC,YAAY,CAAC;;cACpD,gBAAgB,GAAG,oBAAoB,CAAC,aAAa,CAAC;;cACtD,iBAAiB,GAAG,eAAe,GAAG,eAAe,CAAC,EAAE,GAAG,SAAS;;cACpE,kBAAkB,GAAG,gBAAgB,GAAG,gBAAgB,CAAC,EAAE,GAAG,SAAS;QAC7E,IAAI,iBAAiB,KAAK,kBAAkB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC9D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC;SAC9D;KACF;;;YArOF,SAAS,SAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;GAmBT;;aAEF;;;0BAME,SAAS,SAAC,UAAU,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;6BAI1C,SAAS,SAAC,aAAa,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;0BAI7C,KAAK;oBAIL,KAAK;uBAIL,KAAK;4BAIL,KAAK;wBAIL,KAAK;yBAIL,KAAK;uBAIL,KAAK;yBAIL,KAAK;2BAIL,KAAK;kCAIL,MAAM;8BAIN,MAAM;2BAIN,MAAM;wBAIN,MAAM;;;;;;;ACxFT,MAwBa,kBAAkB;;;YAd9B,QAAQ,SAAC;gBACR,YAAY,EAAE;oBACZ,qBAAqB;oBACrB,aAAa;oBACb,kBAAkB;oBAClB,oBAAoB;oBACpB,eAAe;oBACf,iBAAiB;iBAClB;gBACD,OAAO,EAAE,CAAE,qBAAqB,CAAC;gBACjC,OAAO,EAAE,CAAE,YAAY,EAAE,WAAW,CAAE;gBACtC,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,EAAE;aACd;;;;;;;;;;;;;;;;;;;;"}
