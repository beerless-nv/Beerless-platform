/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { clearAllSelection, getFirstSelectedItem, hasGroup, stopPropagationAndDefault } from '../utils/util';
export class DropdownComponent {
    constructor() {
        /**
         * bind to [checkbox], the flag for multi-select (checkbox) mode.
         */
        this.checkbox = false;
        /**
         * bind to [filterBox] for displaying the filter input text box
         */
        this.filterBox = false;
        /**
         * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)
         */
        this.allowClear = true;
        /**
         * bind to [formatNumber] for show formatted number text
         */
        this.formatNumber = false;
        /**
         * for 2-way binding of [selectedValue]
         */
        this.selectedValueChange = new EventEmitter(true);
        /**
         * [selectionChange] event that will be triggered when changing of the selection
         */
        this.selectionChange = new EventEmitter(true);
        /**
         * [dropdownBlur] event that will be triggered with (blur) of dropdown
         */
        this.dropdownBlur = new EventEmitter();
        /**
         * [itemClick] event that will be triggered when clicking the option of dropdown
         */
        this.itemClick = new EventEmitter();
        /**
         * flag of clicking dropdown. It's to prevent (blur) of dropdown from happening in checkbox mode.
         */
        this._clickedItems = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.items) {
            this._checkSelectionChange(changes.items.previousValue, changes.items.currentValue);
        }
    }
    /**
     * triggered when clicking the dropdown
     * @param {?} event
     * @return {?}
     */
    onItemsClick(event) {
        if (event.offsetX > (event.target.clientWidth + event.target.clientLeft)) {
            stopPropagationAndDefault(event);
            return;
        }
        // should ignore clicking on filter
        if (this.checkbox && event.target.type !== 'text') {
            this._clickedItems = true;
        }
    }
    /**
     * triggered when clicking the item
     * @param {?} currentItem
     * @return {?}
     */
    onItemClick(currentItem) {
        if (!this.checkbox) {
            this.selectedValue = this._getItemValue(currentItem); // currentItem.value != null ? currentItem.value : currentItem.text;
            clearAllSelection(this.items);
            // set the selection of current one
            currentItem.selected = true;
            this.itemClick.emit(currentItem);
            this._onSelectionChange(this.selectedValue);
        }
    }
    /**
     * triggers with (blur) event of filter input box
     * @param {?} event
     * @return {?}
     */
    onFilterTextBlur(event) {
        this.dropdownBlur.emit(event);
    }
    /**
     * triggers with (blur) event of dropdown
     * @param {?} event
     * @return {?}
     */
    onItemsBlur(event) {
        if (this.checkbox) {
            if (this._clickedItems) {
                // in checkbox mode, this blur event will be ignored when clicking the dropdown (check the checkbox)
                event.target.focus();
                this._clickedItems = false;
                return;
            }
        }
        this.dropdownBlur.emit(event);
    }
    /**
     * toggle the selection when checking status changed (in checkbox mode)
     * @param {?} item
     * @return {?}
     */
    toggleSelection(item) {
        item.selected = !item.selected;
        this.selectionChange.emit(this._getItemValue(item)); // item.value != null ? item.value : item.text);
    }
    /**
     * items values list after applying the filter
     * @return {?}
     */
    get itemsValues() {
        /** @type {?} */
        let filter;
        if (this.filterValue) {
            filter = this.filterValue.toUpperCase();
        }
        if (filter == null) {
            return this.items;
        }
        if (!this.items || this.items.length === 0) {
            return [];
        }
        if (hasGroup(this.items)) {
            /** @type {?} */
            const items = [];
            this.items.forEach(groupItem => {
                if (groupItem.group != null && groupItem.group.toString().toUpperCase().includes(filter)) {
                    // if groupItem contains the filters, the groupItem needs to be displayed as well
                    items.push(groupItem);
                }
                else {
                    /** @type {?} */
                    const filteredItems = groupItem.items.filter(item => item.text != null && item.text.toString().toUpperCase().includes(filter));
                    if (filteredItems && filteredItems.length > 0) {
                        items.push({ group: groupItem.group, items: filteredItems });
                    }
                }
            });
            return items;
        }
        else {
            return this.items.filter(item => (item.text != null && item.text.toString().toUpperCase().includes(filter)));
        }
    }
    /**
     * options CSS class
     * @return {?}
     */
    get optionsClass() {
        if (this.filterBox && !this.checkbox) {
            return 'options with-filter';
        }
        else {
            return 'options no-filter';
        }
    }
    /**
     * get item value. Return text if value is not available
     * @private
     * @param {?} item
     * @return {?}
     */
    _getItemValue(item) {
        return item ? item.value != null ? item.value : item.text : undefined;
    }
    /**
     * selection changed, emits events: (selectedValueChange) and (selectionChange);
     * @private
     * @param {?} value
     * @return {?}
     */
    _onSelectionChange(value) {
        this.selectedValueChange.emit(value);
        this.selectionChange.emit(value);
    }
    /**
     * check whether the selection is changed. Emits relative events when if changed.
     * @private
     * @param {?} previousValue
     * @param {?} currentValue
     * @return {?}
     */
    _checkSelectionChange(previousValue, currentValue) {
        /** @type {?} */
        const curSelectedItem = getFirstSelectedItem(currentValue);
        /** @type {?} */
        const lastSelectedItem = getFirstSelectedItem(previousValue);
        /** @type {?} */
        const curSelectedItemId = curSelectedItem ? curSelectedItem.id : undefined;
        /** @type {?} */
        const lastSelectedItemId = lastSelectedItem ? lastSelectedItem.id : undefined;
        if (curSelectedItemId !== lastSelectedItemId && !this.checkbox) {
            this._onSelectionChange(this._getItemValue(curSelectedItem));
        }
    }
}
DropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'dropdown',
                template: `
    <span #dropdown class="dropdown" tabindex="3" (mousedown)="onItemsClick($event)" (blur)="onItemsBlur($event)" *ngIf="!disabled" >
      <input-filter #filterInput tabindex="4" *ngIf="filterBox && !checkbox" [(filterValue)]="filterValue" (inputFilterBlur)="onFilterTextBlur($event)"></input-filter>
      <span #selectionOptions [ngClass]="optionsClass">
        <ng-container *ngFor="let item of itemsValues" >
          <ng-container *ngIf="item && item.group">
            <group-item [item]="item"></group-item>
            <item *ngFor="let subItem of item.items" (itemClick)="onItemClick(subItem)" (checkStatusChange)="toggleSelection(subItem)"
                  [item]="subItem" [checkbox]="checkbox" [formatNumber]="formatNumber" [suffixText]="suffixText">
            </item>
          </ng-container>
          <ng-container *ngIf="item && !item.group">
            <item (itemClick)="onItemClick(item)" (checkStatusChange)="toggleSelection(item)"
                  [item]="item" [checkbox]="checkbox" [formatNumber]="formatNumber" [suffixText]="suffixText">
            </item>
          </ng-container>
        </ng-container>
      </span>
    </span>
  `,
                styles: ["*,:after,:before{font-size:inherit;font-weight:inherit;font-family:inherit;box-sizing:inherit;background:inherit}.dropdown{width:100%;padding:0;display:none;margin:0;border:1px solid #66afe9;border-top:none;border-bottom:none;border-top-right-radius:0;border-top-left-radius:0;box-sizing:border-box;position:relative;z-index:999}.dropdown:focus{outline:0}.dropdown .options{width:calc(100% + 2px);left:0;box-sizing:border-box;background:#fff;position:absolute;max-height:228px;overflow-y:auto;overflow-x:hidden;border:1px solid #66afe9;border-top:none;border-bottom-right-radius:4px;border-bottom-left-radius:4px;margin-left:-1px;margin-right:-1px}.dropdown .with-filter{top:32px}.dropdown .no-filter{top:0}"]
            }] }
];
DropdownComponent.propDecorators = {
    dropdownRef: [{ type: ViewChild, args: ['dropdown', { read: ElementRef },] }],
    filterInputRef: [{ type: ViewChild, args: ['filterInput', { read: ElementRef },] }],
    placeHolder: [{ type: Input }],
    items: [{ type: Input }],
    checkbox: [{ type: Input }],
    selectedValue: [{ type: Input }],
    filterBox: [{ type: Input }],
    suffixText: [{ type: Input }],
    disabled: [{ type: Input }],
    allowClear: [{ type: Input }],
    formatNumber: [{ type: Input }],
    selectedValueChange: [{ type: Output }],
    selectionChange: [{ type: Output }],
    dropdownBlur: [{ type: Output }],
    itemClick: [{ type: Output }]
};
if (false) {
    /**
     * Child element reference of dropdown
     * @type {?}
     */
    DropdownComponent.prototype.dropdownRef;
    /**
     * Child element reference of filter input text
     * @type {?}
     */
    DropdownComponent.prototype.filterInputRef;
    /**
     * bind to [placeHolder] for displaying the place holder string of the anchor.
     * @type {?}
     */
    DropdownComponent.prototype.placeHolder;
    /**
     * bind to [items] for the options/groups in the dropdown
     * @type {?}
     */
    DropdownComponent.prototype.items;
    /**
     * bind to [checkbox], the flag for multi-select (checkbox) mode.
     * @type {?}
     */
    DropdownComponent.prototype.checkbox;
    /**
     * bind to [selectedValue] for the value of the selected option from dropdown
     * @type {?}
     */
    DropdownComponent.prototype.selectedValue;
    /**
     * bind to [filterBox] for displaying the filter input text box
     * @type {?}
     */
    DropdownComponent.prototype.filterBox;
    /**
     * bind to [suffixText] for displaying the suffix of the selected text of anchor
     * @type {?}
     */
    DropdownComponent.prototype.suffixText;
    /**
     * bind to [disabled] for disabling the dropdown
     * @type {?}
     */
    DropdownComponent.prototype.disabled;
    /**
     * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)
     * @type {?}
     */
    DropdownComponent.prototype.allowClear;
    /**
     * bind to [formatNumber] for show formatted number text
     * @type {?}
     */
    DropdownComponent.prototype.formatNumber;
    /**
     * for 2-way binding of [selectedValue]
     * @type {?}
     */
    DropdownComponent.prototype.selectedValueChange;
    /**
     * [selectionChange] event that will be triggered when changing of the selection
     * @type {?}
     */
    DropdownComponent.prototype.selectionChange;
    /**
     * [dropdownBlur] event that will be triggered with (blur) of dropdown
     * @type {?}
     */
    DropdownComponent.prototype.dropdownBlur;
    /**
     * [itemClick] event that will be triggered when clicking the option of dropdown
     * @type {?}
     */
    DropdownComponent.prototype.itemClick;
    /**
     * filter value
     * @type {?}
     */
    DropdownComponent.prototype.filterValue;
    /**
     * flag of clicking dropdown. It's to prevent (blur) of dropdown from happening in checkbox mode.
     * @type {?}
     * @private
     */
    DropdownComponent.prototype._clickedItems;
}
//# sourceMappingURL=data:application/json;base64,