/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { clearAllSelection, getFirstSelectedItem, stopPropagationAndDefault } from './utils/util';
export class DropdownListComponent {
    constructor() {
        /**
         * bind to [multiSelection], the flag for multi-select (checkbox) mode.
         */
        this.multiSelection = false;
        /**
         * bind to [filterBox] for displaying the filter input text box
         */
        this.filterBox = false;
        /**
         * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)
         */
        this.allowClear = true;
        /**
         * bind to [formatNumber] for show formatted number text
         */
        this.formatNumber = false;
        /**
         * for 2-way binding of [selectedValue], using async event to
         * prevent "ExpressionChangedAfterItHasBeenCheckedError".
         */
        this.selectedValueChange = new EventEmitter(true);
        /**
         * [selectionChange] event that will be triggered when changing of the selection.
         * Using async event to prevent "ExpressionChangedAfterItHasBeenCheckedError".
         */
        this.selectionChange = new EventEmitter(true);
        /**
         * visibility flag of drop down
         */
        this.dropdownVisibility = false;
    }
    /**
     * current selected text
     * @return {?}
     */
    get selectedText() {
        if (!this.multiSelection) {
            /** @type {?} */
            const selectedItem = getFirstSelectedItem(this.items);
            return selectedItem ? selectedItem.text : undefined;
        }
    }
    /**
     * triggered with (selectionChange) event, emits (selectedValueChange) and (selectionChange)
     * @param {?} event
     * @return {?}
     */
    onSelectionChange(event) {
        this.selectedValueChange.emit(event);
        this.selectionChange.emit(event);
    }
    /**
     * triggered with (anchorClick) event, controlling the "open" and "close" of the dropdown
     * @param {?} event
     * @return {?}
     */
    onAnchorClick(event) {
        if (this.disabled) {
            stopPropagationAndDefault(event);
            return;
        }
        if (this._isSelectionOpen()) {
            this._hideItemList();
        }
        else {
            this._showItemsList();
        }
        stopPropagationAndDefault(event);
    }
    /**
     * triggered with (itemClick) event, closes the dropdown in non-checkbox mode
     * @return {?}
     */
    onItemClick() {
        if (!this.multiSelection) {
            this._hideItemList();
        }
    }
    /**
     * triggered with (clearanceClick) event, clearing all selections
     * and emits (selectedValueChange) and (selectionChange) event for empty value
     * @param {?} event
     * @return {?}
     */
    onClearanceClick(event) {
        if (!this.multiSelection) {
            this.selectedValue = void 0;
            this.selectedValueChange.emit(undefined);
            this.selectionChange.emit(undefined);
            clearAllSelection(this.items);
        }
        stopPropagationAndDefault(event);
    }
    /**
     * triggered with (dropdownBlur) event, closes the dropdown
     * @return {?}
     */
    onItemsBlur() {
        if (this._isSelectionOpen()) {
            this._hideItemList();
        }
    }
    /**
     * close the dropdown
     * @private
     * @return {?}
     */
    _hideItemList() {
        // hide the dropdown element (has some problem for using CSS directly, using this as a workaround)
        this._dropdownElement.classList.remove('visible');
        this._dropdownElement.style.display = 'none';
        this.dropdownVisibility = false;
    }
    /**
     * open the dropdown
     * @private
     * @return {?}
     */
    _showItemsList() {
        // display the dropdown element (has some problem for using CSS directly, using this as a workaround)
        this._dropdownElement.classList.add('visible');
        this._dropdownElement.style.display = 'block';
        this.dropdownVisibility = true;
        // scrolling to the selected item
        if (this._selectedElement) {
            this._selectedElement.scrollIntoView({ behavior: 'instant', block: 'center' });
        }
        // setting the focus
        if (this.filterBox && !this.multiSelection) {
            this._filterInputElement.focus();
        }
        else {
            this._dropdownElement.focus();
        }
    }
    /**
     * visibility status of dropdown
     * @private
     * @return {?}
     */
    _isSelectionOpen() {
        return this.dropdownVisibility;
    }
    /**
     * get the real dropdown element (for focusing and visibility controlling), the <span> not the <dropdown>
     * @private
     * @return {?}
     */
    get _dropdownElement() {
        return this.dropdownRef ? this.dropdownRef.nativeElement ? this.dropdownRef.nativeElement.firstElementChild : null : null;
    }
    /**
     * get the real filter element (for focusing), the <input> not the <input-filter>
     * @private
     * @return {?}
     */
    get _filterInputElement() {
        return this._dropdownElement ?
            this._dropdownElement.firstElementChild ? this._dropdownElement.firstElementChild.firstElementChild : null : null;
    }
    /**
     * get the HTMLElement of selected item, for doing (scrollIntoView) scrolling to the selected item
     * @private
     * @return {?}
     */
    get _selectedElement() {
        /** @type {?} */
        const selectedItem = getFirstSelectedItem(this.items);
        return selectedItem ? (/** @type {?} */ (document.getElementById(selectedItem.id))) : undefined;
    }
}
DropdownListComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-dropdown-list',
                template: `
    <span class="ngx-select">
        <anchor (anchorClick)="onAnchorClick($event)" (clearanceClick)="onClearanceClick($event)"
                [checkbox]="multiSelection"
                [formatNumber]="formatNumber"
                [suffixText]="suffixText"
                [placeHolder]="placeHolder"
                [allowClear]="allowClear"
                [openStatus]="dropdownVisibility"
                [selectedText]="selectedText"
                [disabled]="disabled">
        </anchor>
        <dropdown #dropdown (dropdownBlur) = "onItemsBlur()" (selectionChange)="onSelectionChange($event)"
                [items]="items"
                [checkbox]="multiSelection"
                [filterBox]="filterBox"
                [formatNumber]="formatNumber"
                [suffixText]="suffixText"
                [(selectedValue)]="selectedValue"
                (itemClick) = "onItemClick()"
                [disabled]="disabled">
        </dropdown>
    </span>
  `,
                styles: [":host *,:host :after,:host :before{font-size:inherit;font-weight:inherit;font-family:inherit;box-sizing:inherit;background:inherit}:host .ngx-select{border-radius:4px;font-size:14px;position:relative;display:inline-block;width:100%;height:34px;background:#fff;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}"]
            }] }
];
DropdownListComponent.propDecorators = {
    dropdownRef: [{ type: ViewChild, args: ['dropdown', { read: ElementRef },] }],
    placeHolder: [{ type: Input }],
    items: [{ type: Input }],
    multiSelection: [{ type: Input }],
    selectedValue: [{ type: Input }],
    filterBox: [{ type: Input }],
    suffixText: [{ type: Input }],
    disabled: [{ type: Input }],
    allowClear: [{ type: Input }],
    formatNumber: [{ type: Input }],
    selectedValueChange: [{ type: Output }],
    selectionChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DropdownListComponent.prototype.dropdownRef;
    /**
     * bind to [placeHolder] for displaying the place holder string of the anchor.
     * @type {?}
     */
    DropdownListComponent.prototype.placeHolder;
    /**
     * bind to [items] for the options/groups in the dropdown
     * @type {?}
     */
    DropdownListComponent.prototype.items;
    /**
     * bind to [multiSelection], the flag for multi-select (checkbox) mode.
     * @type {?}
     */
    DropdownListComponent.prototype.multiSelection;
    /**
     * bind to [selectedValue] for the value of the selected option from dropdown
     * @type {?}
     */
    DropdownListComponent.prototype.selectedValue;
    /**
     * bind to [filterBox] for displaying the filter input text box
     * @type {?}
     */
    DropdownListComponent.prototype.filterBox;
    /**
     * bind to [suffixText] for displaying the suffix of the selected text of anchor
     * @type {?}
     */
    DropdownListComponent.prototype.suffixText;
    /**
     * bind to [disabled] for disabling the dropdown
     * @type {?}
     */
    DropdownListComponent.prototype.disabled;
    /**
     * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)
     * @type {?}
     */
    DropdownListComponent.prototype.allowClear;
    /**
     * bind to [formatNumber] for show formatted number text
     * @type {?}
     */
    DropdownListComponent.prototype.formatNumber;
    /**
     * for 2-way binding of [selectedValue], using async event to
     * prevent "ExpressionChangedAfterItHasBeenCheckedError".
     * @type {?}
     */
    DropdownListComponent.prototype.selectedValueChange;
    /**
     * [selectionChange] event that will be triggered when changing of the selection.
     * Using async event to prevent "ExpressionChangedAfterItHasBeenCheckedError".
     * @type {?}
     */
    DropdownListComponent.prototype.selectionChange;
    /**
     * visibility flag of drop down
     * @type {?}
     */
    DropdownListComponent.prototype.dropdownVisibility;
}
//# sourceMappingURL=data:application/json;base64,