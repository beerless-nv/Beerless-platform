/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { stopPropagationAndDefault, isNumber } from '../utils/util';
import { DecimalPipe } from '@angular/common';
export class AnchorComponent {
    /**
     * @param {?} _decimalPipe
     */
    constructor(_decimalPipe) {
        this._decimalPipe = _decimalPipe;
        /**
         * bind to [checkbox] for checking whether the clearance flag should be shown or not.
         */
        this.checkbox = false;
        /**
         * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)
         */
        this.allowClear = true;
        /**
         * bind to [openStatus], it's the visibility status of dropdown, for showing the arrow on anchor
         */
        this.openStatus = false;
        /**
         * bind to [disabled] for disabling the anchor
         */
        this.disabled = false;
        /**
         * will be triggered when clicking the anchor
         */
        this.anchorClick = new EventEmitter();
        /**
         * will be triggered when clicking the clearance
         */
        this.clearanceClick = new EventEmitter();
    }
    /**
     * flag for showing the clearance flag
     * @return {?}
     */
    get showClearanceFlag() {
        return !this.checkbox && this.selectedText && this.allowClear;
    }
    /**
     * the text displays on anchor
     * @return {?}
     */
    get anchorDisplayText() {
        /** @type {?} */
        let anchorDisplayText = this.selectedText ? (this.formatNumber ? (isNumber(this.selectedText) ?
            this._decimalPipe.transform(this.selectedText, '1.0-2') : this.selectedText) :
            this.selectedText) + (this.suffixText ? this.suffixText : '') : this.placeHolder;
        /** @type {?} */
        let charLength = 1;
        if (this.showClearanceFlag && this.anchorLength > 0) {
            charLength = Math.floor((this.anchorLength - 50) / 7);
        }
        else {
            charLength = Math.floor((this.anchorLength - 50) / 7);
        }
        if (anchorDisplayText.length > charLength) {
            anchorDisplayText = anchorDisplayText.slice(0, charLength - 2) + '...';
        }
        return anchorDisplayText;
    }
    /**
     * anchor CSS class
     * @return {?}
     */
    get anchorClass() {
        /** @type {?} */
        let anchorClassStatusPart;
        /** @type {?} */
        let anchorClassFontColor;
        if (this.disabled) {
            anchorClassStatusPart = 'selection-anchor-disabled';
            anchorClassFontColor = 'place-holder';
        }
        else {
            if (this.openStatus) {
                anchorClassStatusPart = 'selection-anchor-open';
            }
            else {
                anchorClassStatusPart = 'selection-anchor-close';
            }
            if (this.selectedText != null) {
                anchorClassFontColor = 'selected-item';
            }
            else {
                anchorClassFontColor = 'place-holder';
            }
        }
        return `${anchorClassStatusPart} ${anchorClassFontColor}`;
    }
    /**
     * triggered when clicking the anchor
     * @param {?} event
     * @return {?}
     */
    onAnchorClick(event) {
        this.anchorClick.emit(event);
    }
    /**
     * triggered with (blur) of anchor
     * @param {?} event
     * @return {?}
     */
    onAnchorBlur(event) {
        stopPropagationAndDefault(event);
    }
    /**
     * triggered when clicking the clearance
     * @param {?} event
     * @return {?}
     */
    onClearanceClick(event) {
        this.clearanceClick.emit(event);
    }
    /**
     * triggered when resizing, get the clientWidth of anchor
     * @return {?}
     */
    onResize() {
        this.anchorLength = this.anchorRef ? this.anchorRef.nativeElement ? this.anchorRef.nativeElement.clientWidth : 0 : 0;
    }
}
AnchorComponent.decorators = [
    { type: Component, args: [{
                selector: 'anchor',
                template: `
    <span #anchor tabindex="2" [ngClass]="anchorClass" (window:resize)="onResize()"
          (mousedown)="onAnchorClick($event)" (blur)="onAnchorBlur($event)"> {{anchorDisplayText}}
      <span #selectionClearance class="selection-clearance" (mousedown)="onClearanceClick($event)" *ngIf="showClearanceFlag">&times;</span>
    </span>
  `,
                providers: [DecimalPipe],
                styles: ["*,:after,:before{font-size:inherit;font-weight:inherit;font-family:inherit;box-sizing:inherit;background:inherit}.selection-anchor-close:after,.selection-anchor-disabled:after,.selection-anchor-open:after,.vertical-center{position:absolute;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.hover-box,.selection-anchor-close:hover{outline:0;box-shadow:0 0 6px #23adff;border-radius:4px}.anchor-box,.selection-anchor,.selection-anchor-close,.selection-anchor-disabled,.selection-anchor-open{height:100%;border-radius:4px;width:100%;position:relative;display:inline-block;padding:8px 12px 5px;border:1px solid;outline:0;box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-sizing:border-box;white-space:nowrap}.selection-anchor,.selection-anchor-close,.selection-anchor-open{cursor:pointer}.selection-anchor .selection-clearance,.selection-anchor-close .selection-clearance,.selection-anchor-open .selection-clearance{position:absolute;right:35px;font-weight:700}.selection-anchor .selection-clearance:hover,.selection-anchor-close .selection-clearance:hover,.selection-anchor-open .selection-clearance:hover{color:#000}.selection-anchor-close:focus,.selection-anchor-open:focus,.selection-anchor:focus{box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;border-color:#66afe9}.selection-anchor-disabled{border-color:#ccc;cursor:default;pointer-events:none;background:#f8f8f8;-webkit-filter:opacity(50%);filter:opacity(50%)}.selection-anchor-disabled:after{font-size:12px;content:'\\0023F7';right:10px;padding-bottom:3px}.selection-anchor-open{border-bottom:none;border-bottom-right-radius:0;border-bottom-left-radius:0;border-color:#66afe9}.selection-anchor-open:after{font-size:12px;content:\"\\0023F6\";right:10px;padding-bottom:3px}.selection-anchor-close{border-color:#ccc}.selection-anchor-close:after{font-size:12px;content:'\\0023F7';right:10px;padding-bottom:3px}.place-holder{color:#999}.selected-item{color:#495057}"]
            }] }
];
/** @nocollapse */
AnchorComponent.ctorParameters = () => [
    { type: DecimalPipe }
];
AnchorComponent.propDecorators = {
    anchorRef: [{ type: ViewChild, args: ['anchor', { read: ElementRef },] }],
    placeHolder: [{ type: Input }],
    checkbox: [{ type: Input }],
    suffixText: [{ type: Input }],
    allowClear: [{ type: Input }],
    formatNumber: [{ type: Input }],
    selectedText: [{ type: Input }],
    openStatus: [{ type: Input }],
    disabled: [{ type: Input }],
    anchorClick: [{ type: Output }],
    clearanceClick: [{ type: Output }]
};
if (false) {
    /**
     * Child element reference of anchor
     * @type {?}
     */
    AnchorComponent.prototype.anchorRef;
    /**
     * bind to [placeHolder] for displaying the place holder string of the anchor.
     * @type {?}
     */
    AnchorComponent.prototype.placeHolder;
    /**
     * bind to [checkbox] for checking whether the clearance flag should be shown or not.
     * @type {?}
     */
    AnchorComponent.prototype.checkbox;
    /**
     * bind to [suffixText] for displaying the suffix of the selected text of anchor
     * @type {?}
     */
    AnchorComponent.prototype.suffixText;
    /**
     * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)
     * @type {?}
     */
    AnchorComponent.prototype.allowClear;
    /**
     * bind to [formatNumber] for show formatted number text
     * @type {?}
     */
    AnchorComponent.prototype.formatNumber;
    /**
     * bind to [selectedText] for displaying the selected text on anchor
     * @type {?}
     */
    AnchorComponent.prototype.selectedText;
    /**
     * bind to [openStatus], it's the visibility status of dropdown, for showing the arrow on anchor
     * @type {?}
     */
    AnchorComponent.prototype.openStatus;
    /**
     * bind to [disabled] for disabling the anchor
     * @type {?}
     */
    AnchorComponent.prototype.disabled;
    /**
     * will be triggered when clicking the anchor
     * @type {?}
     */
    AnchorComponent.prototype.anchorClick;
    /**
     * will be triggered when clicking the clearance
     * @type {?}
     */
    AnchorComponent.prototype.clearanceClick;
    /**
     * length of anchor element, used for calculate the string length of the anchor displayed text.
     * @type {?}
     */
    AnchorComponent.prototype.anchorLength;
    /**
     * @type {?}
     * @private
     */
    AnchorComponent.prototype._decimalPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5jaG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1kcm9wZG93bi1saXN0LyIsInNvdXJjZXMiOlsic3JjL25neC1kcm9wZG93bi1saXN0L2FuY2hvci9hbmNob3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFDLHlCQUF5QixFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFjNUMsTUFBTSxPQUFPLGVBQWU7Ozs7SUFvRDFCLFlBQW9CLFlBQXlCO1FBQXpCLGlCQUFZLEdBQVosWUFBWSxDQUFhOzs7O1FBdkNwQyxhQUFRLEdBQUcsS0FBSyxDQUFDOzs7O1FBUWpCLGVBQVUsR0FBRyxJQUFJLENBQUM7Ozs7UUFZbEIsZUFBVSxHQUFHLEtBQUssQ0FBQzs7OztRQUluQixhQUFRLEdBQUcsS0FBSyxDQUFDOzs7O1FBSWhCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7OztRQUl0QyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFPSCxDQUFDOzs7OztJQUtqRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDaEUsQ0FBQzs7Ozs7SUFLRCxJQUFJLGlCQUFpQjs7WUFDZixpQkFBaUIsR0FBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQzlGLElB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O3lCQUlMLEtBQUs7dUJBSUwsS0FBSzswQkFJTCxNQUFNOzZCQUlOLE1BQU07Ozs7Ozs7SUF6Q1Asb0NBQWlFOzs7OztJQUtqRSxzQ0FBNkI7Ozs7O0lBSTdCLG1DQUEwQjs7Ozs7SUFJMUIscUNBQTRCOzs7OztJQUk1QixxQ0FBMkI7Ozs7O0lBSTNCLHVDQUErQjs7Ozs7SUFJL0IsdUNBQTJCOzs7OztJQUkzQixxQ0FBNEI7Ozs7O0lBSTVCLG1DQUEwQjs7Ozs7SUFJMUIsc0NBQWdEOzs7OztJQUloRCx5Q0FBbUQ7Ozs7O0lBS25ELHVDQUFxQjs7Ozs7SUFFVCx1Q0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtzdG9wUHJvcGFnYXRpb25BbmREZWZhdWx0LCBpc051bWJlcn0gZnJvbSAnLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQge0RlY2ltYWxQaXBlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbmNob3InLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuICNhbmNob3IgdGFiaW5kZXg9XCIyXCIgW25nQ2xhc3NdPVwiYW5jaG9yQ2xhc3NcIiAod2luZG93OnJlc2l6ZSk9XCJvblJlc2l6ZSgpXCJcbiAgICAgICAgICAobW91c2Vkb3duKT1cIm9uQW5jaG9yQ2xpY2soJGV2ZW50KVwiIChibHVyKT1cIm9uQW5jaG9yQmx1cigkZXZlbnQpXCI+IHt7YW5jaG9yRGlzcGxheVRleHR9fVxuICAgICAgPHNwYW4gI3NlbGVjdGlvbkNsZWFyYW5jZSBjbGFzcz1cInNlbGVjdGlvbi1jbGVhcmFuY2VcIiAobW91c2Vkb3duKT1cIm9uQ2xlYXJhbmNlQ2xpY2soJGV2ZW50KVwiICpuZ0lmPVwic2hvd0NsZWFyYW5jZUZsYWdcIj4mdGltZXM7PC9zcGFuPlxuICAgIDwvc3Bhbj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vYW5jaG9yLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW0RlY2ltYWxQaXBlXVxufSlcblxuZXhwb3J0IGNsYXNzIEFuY2hvckNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBDaGlsZCBlbGVtZW50IHJlZmVyZW5jZSBvZiBhbmNob3JcbiAgICovXG4gIEBWaWV3Q2hpbGQoJ2FuY2hvcicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBhbmNob3JSZWY6IEVsZW1lbnRSZWY7XG5cbiAgLyoqXG4gICAqIGJpbmQgdG8gW3BsYWNlSG9sZGVyXSBmb3IgZGlzcGxheWluZyB0aGUgcGxhY2UgaG9sZGVyIHN0cmluZyBvZiB0aGUgYW5jaG9yLlxuICAgKi9cbiAgQElucHV0KCkgcGxhY2VIb2xkZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIGJpbmQgdG8gW2NoZWNrYm94XSBmb3IgY2hlY2tpbmcgd2hldGhlciB0aGUgY2xlYXJhbmNlIGZsYWcgc2hvdWxkIGJlIHNob3duIG9yIG5vdC5cbiAgICovXG4gIEBJbnB1dCgpIGNoZWNrYm94ID0gZmFsc2U7XG4gIC8qKlxuICAgKiBiaW5kIHRvIFtzdWZmaXhUZXh0XSBmb3IgZGlzcGxheWluZyB0aGUgc3VmZml4IG9mIHRoZSBzZWxlY3RlZCB0ZXh0IG9mIGFuY2hvclxuICAgKi9cbiAgQElucHV0KCkgc3VmZml4VGV4dDogc3RyaW5nO1xuICAvKipcbiAgICogYmluZCB0byBbYWxsb3dDbGVhcl0gZm9yIGVuYWJsaW5nIHRoZSBjbGVhcmFuY2UgKGNsZWFyYW5jZSBpcyBub3QgYXZhaWFibGUgd2hlbiBjaGVja2JveCBpcyBlbmFibGVkKVxuICAgKi9cbiAgQElucHV0KCkgYWxsb3dDbGVhciA9IHRydWU7XG4gIC8qKlxuICAgKiBiaW5kIHRvIFtmb3JtYXROdW1iZXJdIGZvciBzaG93IGZvcm1hdHRlZCBudW1iZXIgdGV4dFxuICAgKi9cbiAgQElucHV0KCkgZm9ybWF0TnVtYmVyOiBib29sZWFuO1xuICAvKipcbiAgICogYmluZCB0byBbc2VsZWN0ZWRUZXh0XSBmb3IgZGlzcGxheWluZyB0aGUgc2VsZWN0ZWQgdGV4dCBvbiBhbmNob3JcbiAgICovXG4gIEBJbnB1dCgpIHNlbGVjdGVkVGV4dDogYW55O1xuICAvKipcbiAgICogYmluZCB0byBbb3BlblN0YXR1c10sIGl0J3MgdGhlIHZpc2liaWxpdHkgc3RhdHVzIG9mIGRyb3Bkb3duLCBmb3Igc2hvd2luZyB0aGUgYXJyb3cgb24gYW5jaG9yXG4gICAqL1xuICBASW5wdXQoKSBvcGVuU3RhdHVzID0gZmFsc2U7XG4gIC8qKlxuICAgKiBiaW5kIHRvIFtkaXNhYmxlZF0gZm9yIGRpc2FibGluZyB0aGUgYW5jaG9yXG4gICAqL1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICAvKipcbiAgICogd2lsbCBiZSB0cmlnZ2VyZWQgd2hlbiBjbGlja2luZyB0aGUgYW5jaG9yXG4gICAqL1xuICBAT3V0cHV0KCkgYW5jaG9yQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgLyoqXG4gICAqIHdpbGwgYmUgdHJpZ2dlcmVkIHdoZW4gY2xpY2tpbmcgdGhlIGNsZWFyYW5jZVxuICAgKi9cbiAgQE91dHB1dCgpIGNsZWFyYW5jZUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIGxlbmd0aCBvZiBhbmNob3IgZWxlbWVudCwgdXNlZCBmb3IgY2FsY3VsYXRlIHRoZSBzdHJpbmcgbGVuZ3RoIG9mIHRoZSBhbmNob3IgZGlzcGxheWVkIHRleHQuXG4gICAqL1xuICBhbmNob3JMZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kZWNpbWFsUGlwZTogRGVjaW1hbFBpcGUpIHt9XG5cbiAgLyoqXG4gICAqIGZsYWcgZm9yIHNob3dpbmcgdGhlIGNsZWFyYW5jZSBmbGFnXG4gICAqL1xuICBnZXQgc2hvd0NsZWFyYW5jZUZsYWcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmNoZWNrYm94ICYmIHRoaXMuc2VsZWN0ZWRUZXh0ICYmIHRoaXMuYWxsb3dDbGVhcjtcbiAgfVxuXG4gIC8qKlxuICAgKiB0aGUgdGV4dCBkaXNwbGF5cyBvbiBhbmNob3JcbiAgICovXG4gIGdldCBhbmNob3JEaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xuICAgIGxldCBhbmNob3JEaXNwbGF5VGV4dCA9ICB0aGlzLnNlbGVjdGVkVGV4dCA/ICh0aGlzLmZvcm1hdE51bWJlciA/IChpc051bWJlcih0aGlzLnNlbGVjdGVkVGV4dCkgP1xuICAgICAgdGhpcy5fZGVjaW1hbFBpcGUudHJhbnNmb3JtKHRoaXMuc2VsZWN0ZWRUZXh0LCAnMS4wLTInKSA6IHRoaXMuc2VsZWN0ZWRUZXh0KSA6XG4gICAgICB0aGlzLnNlbGVjdGVkVGV4dCkgKyAodGhpcy5zdWZmaXhUZXh0ID8gdGhpcy5zdWZmaXhUZXh0IDogJycpIDogdGhpcy5wbGFjZUhvbGRlcjtcblxuICAgIGxldCBjaGFyTGVuZ3RoID0gMTtcbiAgICBpZiAodGhpcy5zaG93Q2xlYXJhbmNlRmxhZyAmJiB0aGlzLmFuY2hvckxlbmd0aCA+IDApIHtcbiAgICAgIGNoYXJMZW5ndGggPSBNYXRoLmZsb29yKCh0aGlzLmFuY2hvckxlbmd0aCAtIDUwKSAvIDcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFyTGVuZ3RoID0gTWF0aC5mbG9vcigodGhpcy5hbmNob3JMZW5ndGggLSA1MCkgLyA3KTtcbiAgICB9XG5cbiAgICBpZiAoYW5jaG9yRGlzcGxheVRleHQubGVuZ3RoID4gY2hhckxlbmd0aCkge1xuICAgICAgYW5jaG9yRGlzcGxheVRleHQgPSBhbmNob3JEaXNwbGF5VGV4dC5zbGljZSgwLCBjaGFyTGVuZ3RoIC0gMikgKyAnLi4uJztcbiAgICB9XG4gICAgcmV0dXJuIGFuY2hvckRpc3BsYXlUZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIGFuY2hvciBDU1MgY2xhc3NcbiAgICovXG4gIGdldCBhbmNob3JDbGFzcygpOiBzdHJpbmcge1xuICAgIGxldCBhbmNob3JDbGFzc1N0YXR1c1BhcnQ7XG4gICAgbGV0IGFuY2hvckNsYXNzRm9udENvbG9yO1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICBhbmNob3JDbGFzc1N0YXR1c1BhcnQgPSAnc2VsZWN0aW9uLWFuY2hvci1kaXNhYmxlZCc7XG4gICAgICBhbmNob3JDbGFzc0ZvbnRDb2xvciA9ICdwbGFjZS1ob2xkZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5vcGVuU3RhdHVzKSB7XG4gICAgICAgIGFuY2hvckNsYXNzU3RhdHVzUGFydCA9ICdzZWxlY3Rpb24tYW5jaG9yLW9wZW4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yQ2xhc3NTdGF0dXNQYXJ0ID0gJ3NlbGVjdGlvbi1hbmNob3ItY2xvc2UnO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUZXh0ICE9IG51bGwpIHtcbiAgICAgICAgYW5jaG9yQ2xhc3NGb250Q29sb3IgPSAnc2VsZWN0ZWQtaXRlbSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmNob3JDbGFzc0ZvbnRDb2xvciA9ICdwbGFjZS1ob2xkZXInO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYCR7YW5jaG9yQ2xhc3NTdGF0dXNQYXJ0fSAke2FuY2hvckNsYXNzRm9udENvbG9yfWA7XG4gIH1cblxuICAvKipcbiAgICogdHJpZ2dlcmVkIHdoZW4gY2xpY2tpbmcgdGhlIGFuY2hvclxuICAgKi9cbiAgb25BbmNob3JDbGljayhldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmFuY2hvckNsaWNrLmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIHRyaWdnZXJlZCB3aXRoIChibHVyKSBvZiBhbmNob3JcbiAgICovXG4gIG9uQW5jaG9yQmx1cihldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBzdG9wUHJvcGFnYXRpb25BbmREZWZhdWx0KGV2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0cmlnZ2VyZWQgd2hlbiBjbGlja2luZyB0aGUgY2xlYXJhbmNlXG4gICAqL1xuICBvbkNsZWFyYW5jZUNsaWNrKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJhbmNlQ2xpY2suZW1pdChldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogdHJpZ2dlcmVkIHdoZW4gcmVzaXppbmcsIGdldCB0aGUgY2xpZW50V2lkdGggb2YgYW5jaG9yXG4gICAqL1xuICBvblJlc2l6ZSgpIHtcbiAgICB0aGlzLmFuY2hvckxlbmd0aCA9IHRoaXMuYW5jaG9yUmVmID8gdGhpcy5hbmNob3JSZWYubmF0aXZlRWxlbWVudCA/IHRoaXMuYW5jaG9yUmVmLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGggOiAwIDogMDtcbiAgfVxufVxuIl19