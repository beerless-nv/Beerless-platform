import { ElementRef, EventEmitter } from '@angular/core';
export declare class DropdownListComponent {
    dropdownRef: ElementRef;
    /**
     * bind to [placeHolder] for displaying the place holder string of the anchor.
     */
    placeHolder: string;
    /**
     * bind to [items] for the options/groups in the dropdown
     */
    items: any[];
    /**
     * bind to [multiSelection], the flag for multi-select (checkbox) mode.
     */
    multiSelection: boolean;
    /**
     * bind to [selectedValue] for the value of the selected option from dropdown
     */
    selectedValue: any;
    /**
     * bind to [filterBox] for displaying the filter input text box
     */
    filterBox: boolean;
    /**
     * bind to [suffixText] for displaying the suffix of the selected text of anchor
     */
    suffixText: string;
    /**
     * bind to [disabled] for disabling the dropdown
     */
    disabled: boolean;
    /**
     * bind to [allowClear] for enabling the clearance (clearance is not avaiable when checkbox is enabled)
     */
    allowClear: boolean;
    /**
     * bind to [formatNumber] for show formatted number text
     */
    formatNumber: boolean;
    /**
     * for 2-way binding of [selectedValue], using async event to
     * prevent "ExpressionChangedAfterItHasBeenCheckedError".
     */
    selectedValueChange: EventEmitter<string>;
    /**
     * [selectionChange] event that will be triggered when changing of the selection.
     * Using async event to prevent "ExpressionChangedAfterItHasBeenCheckedError".
     */
    selectionChange: EventEmitter<any>;
    /**
     * visibility flag of drop down
     */
    dropdownVisibility: boolean;
    /**
     * current selected text
     */
    readonly selectedText: any;
    /**
     * triggered with (selectionChange) event, emits (selectedValueChange) and (selectionChange)
     */
    onSelectionChange(event: any): void;
    /**
     * triggered with (anchorClick) event, controlling the "open" and "close" of the dropdown
     */
    onAnchorClick(event: Event): void;
    /**
     * triggered with (itemClick) event, closes the dropdown in non-checkbox mode
     */
    onItemClick(): void;
    /**
     * triggered with (clearanceClick) event, clearing all selections
     * and emits (selectedValueChange) and (selectionChange) event for empty value
     */
    onClearanceClick(event: Event): void;
    /**
     * triggered with (dropdownBlur) event, closes the dropdown
     */
    onItemsBlur(): void;
    /**
     * close the dropdown
     */
    private _hideItemList;
    /**
     * open the dropdown
     */
    private _showItemsList;
    /**
     * visibility status of dropdown
     */
    private _isSelectionOpen;
    /**
     * get the real dropdown element (for focusing and visibility controlling), the <span> not the <dropdown>
     */
    private readonly _dropdownElement;
    /**
     * get the real filter element (for focusing), the <input> not the <input-filter>
     */
    private readonly _filterInputElement;
    /**
     * get the HTMLElement of selected item, for doing (scrollIntoView) scrolling to the selected item
     */
    private readonly _selectedElement;
}
