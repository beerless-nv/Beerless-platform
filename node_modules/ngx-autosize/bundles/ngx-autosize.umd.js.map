{"version":3,"file":"ngx-autosize.umd.js.map","sources":["ng://ngx-autosize/lib/autosize.directive.ts","ng://ngx-autosize/lib/autosize.module.ts"],"sourcesContent":["import {\n    ElementRef,\n    HostListener,\n    Directive,\n    Input,\n    NgZone, OnDestroy, OnChanges, AfterContentChecked\n} from '@angular/core';\nimport {fromEvent, ReplaySubject} from 'rxjs';\n\nimport {debounceTime, distinctUntilChanged, takeUntil} from 'rxjs/operators';\n\nconst MAX_LOOKUP_RETRIES = 3;\n\n@Directive({\n    selector: '[autosize]'\n})\n\nexport class AutosizeDirective implements OnDestroy, OnChanges, AfterContentChecked {\n    @Input() minRows: number;\n    @Input() maxRows: number;\n    @Input() onlyGrow = false;\n    @Input() useImportant = false;\n\n    private retries = 0;\n    private textAreaEl: any;\n\n    private _oldContent: string;\n    private _oldWidth: number;\n\n    private _destroyed$ = new ReplaySubject(1);\n\n    @HostListener('input', ['$event.target'])\n    onInput(textArea: HTMLTextAreaElement): void {\n        this.adjust();\n    }\n\n    constructor(\n        public element: ElementRef,\n        private _zone: NgZone\n    ) {\n        if (this.element.nativeElement.tagName !== 'TEXTAREA') {\n            this._findNestedTextArea();\n\n        } else {\n            this.textAreaEl = this.element.nativeElement;\n            this.textAreaEl.style.overflow = 'hidden';\n            this._onTextAreaFound();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed$.next(true);\n        this._destroyed$.complete();\n    }\n\n    ngAfterContentChecked() {\n        this.adjust();\n    }\n\n    ngOnChanges(changes) {\n        this.adjust(true);\n    }\n\n    _findNestedTextArea() {\n        this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');\n\n        if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {\n            this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');\n        }\n\n        if (!this.textAreaEl) {\n            if (this.retries >= MAX_LOOKUP_RETRIES) {\n                console.warn('ngx-autosize: textarea not found');\n\n            } else {\n                this.retries++;\n                setTimeout(() => {\n                    this._findNestedTextArea();\n                }, 100);\n            }\n            return;\n        }\n\n        this.textAreaEl.style.overflow = 'hidden';\n        this._onTextAreaFound();\n\n    }\n\n    _onTextAreaFound() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(window, 'resize')\n                .pipe(\n                    takeUntil(this._destroyed$),\n                    debounceTime(200),\n                    distinctUntilChanged()\n                )\n                .subscribe(() => {\n                    this._zone.run(() => {\n                        this.adjust();\n                    });\n                });\n        });\n        setTimeout(() => {\n            this.adjust();\n        });\n    }\n\n    adjust(inputsChanged = false): void {\n        if (this.textAreaEl) {\n\n            const currentText = this.textAreaEl.value;\n\n            if (\n                inputsChanged === false &&\n                currentText === this._oldContent &&\n                this.textAreaEl.offsetWidth === this._oldWidth\n            ) {\n                return;\n            }\n\n            this._oldContent = currentText;\n            this._oldWidth = this.textAreaEl.offsetWidth;\n\n            const clone = this.textAreaEl.cloneNode(true);\n            const parent = this.textAreaEl.parentNode;\n            clone.style.visibility = 'hidden';\n            parent.appendChild(clone);\n\n            clone.style.overflow = 'auto';\n            clone.style.height = 'auto';\n\n            let height = clone.scrollHeight;\n            const willGrow = height > this.textAreaEl.offsetHeight;\n\n            if (this.onlyGrow === false || willGrow) {\n                const lineHeight = this._getLineHeight();\n                const rowsCount = height / lineHeight;\n\n                let styleAttribute = '';\n\n                if (this.minRows && this.minRows >= rowsCount) {\n                    height = this.minRows * lineHeight;\n\n                } else if (this.maxRows && this.maxRows <= rowsCount) {\n                    height = this.maxRows * lineHeight;\n                    styleAttribute += 'overflow: auto;';\n\n                } else {\n                    styleAttribute += 'overflow: hidden;';\n                }\n\n                styleAttribute += `height: ${height}px`;\n\n                styleAttribute += this.useImportant ? '!important;' : ';';\n\n                this.textAreaEl.setAttribute('style', styleAttribute);\n            }\n\n            parent.removeChild(clone);\n        }\n    }\n\n    private _getLineHeight() {\n        let lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);\n        if (isNaN(lineHeight) && window.getComputedStyle) {\n            const styles = window.getComputedStyle(this.textAreaEl);\n            lineHeight = parseInt(styles.lineHeight, 10);\n        }\n\n        if (isNaN(lineHeight)) {\n            const fontSize = window.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');\n            lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);\n        }\n\n        return lineHeight;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { AutosizeDirective } from './autosize.directive';\n\n@NgModule({\n  declarations: [AutosizeDirective],\n  imports: [\n  ],\n  exports: [AutosizeDirective]\n})\nexport class AutosizeModule { }\n"],"names":["ReplaySubject","fromEvent","takeUntil","debounceTime","distinctUntilChanged","Directive","ElementRef","NgZone","Input","HostListener","NgModule"],"mappings":"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"}
