(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-autosize', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-autosize'] = {}),global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAX_LOOKUP_RETRIES = 3;
    var AutosizeDirective = /** @class */ (function () {
        function AutosizeDirective(element, _zone) {
            this.element = element;
            this._zone = _zone;
            this.onlyGrow = false;
            this.useImportant = false;
            this.retries = 0;
            this._destroyed$ = new rxjs.ReplaySubject(1);
            if (this.element.nativeElement.tagName !== 'TEXTAREA') {
                this._findNestedTextArea();
            }
            else {
                this.textAreaEl = this.element.nativeElement;
                this.textAreaEl.style.overflow = 'hidden';
                this._onTextAreaFound();
            }
        }
        /**
         * @param {?} textArea
         * @return {?}
         */
        AutosizeDirective.prototype.onInput = /**
         * @param {?} textArea
         * @return {?}
         */
            function (textArea) {
                this.adjust();
            };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._destroyed$.next(true);
                this._destroyed$.complete();
            };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                this.adjust();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        AutosizeDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.adjust(true);
            };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype._findNestedTextArea = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');
                if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {
                    this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');
                }
                if (!this.textAreaEl) {
                    if (this.retries >= MAX_LOOKUP_RETRIES) {
                        console.warn('ngx-autosize: textarea not found');
                    }
                    else {
                        this.retries++;
                        setTimeout(function () {
                            _this._findNestedTextArea();
                        }, 100);
                    }
                    return;
                }
                this.textAreaEl.style.overflow = 'hidden';
                this._onTextAreaFound();
            };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype._onTextAreaFound = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._zone.runOutsideAngular(function () {
                    rxjs.fromEvent(window, 'resize')
                        .pipe(operators.takeUntil(_this._destroyed$), operators.debounceTime(200), operators.distinctUntilChanged())
                        .subscribe(function () {
                        _this._zone.run(function () {
                            _this.adjust();
                        });
                    });
                });
                setTimeout(function () {
                    _this.adjust();
                });
            };
        /**
         * @param {?=} inputsChanged
         * @return {?}
         */
        AutosizeDirective.prototype.adjust = /**
         * @param {?=} inputsChanged
         * @return {?}
         */
            function (inputsChanged) {
                if (inputsChanged === void 0) {
                    inputsChanged = false;
                }
                if (this.textAreaEl) {
                    /** @type {?} */
                    var currentText = this.textAreaEl.value;
                    if (inputsChanged === false &&
                        currentText === this._oldContent &&
                        this.textAreaEl.offsetWidth === this._oldWidth) {
                        return;
                    }
                    this._oldContent = currentText;
                    this._oldWidth = this.textAreaEl.offsetWidth;
                    /** @type {?} */
                    var clone = this.textAreaEl.cloneNode(true);
                    /** @type {?} */
                    var parent_1 = this.textAreaEl.parentNode;
                    clone.style.visibility = 'hidden';
                    parent_1.appendChild(clone);
                    clone.style.overflow = 'auto';
                    clone.style.height = 'auto';
                    /** @type {?} */
                    var height = clone.scrollHeight;
                    /** @type {?} */
                    var willGrow = height > this.textAreaEl.offsetHeight;
                    if (this.onlyGrow === false || willGrow) {
                        /** @type {?} */
                        var lineHeight = this._getLineHeight();
                        /** @type {?} */
                        var rowsCount = height / lineHeight;
                        /** @type {?} */
                        var styleAttribute = '';
                        if (this.minRows && this.minRows >= rowsCount) {
                            height = this.minRows * lineHeight;
                        }
                        else if (this.maxRows && this.maxRows <= rowsCount) {
                            height = this.maxRows * lineHeight;
                            styleAttribute += 'overflow: auto;';
                        }
                        else {
                            styleAttribute += 'overflow: hidden;';
                        }
                        styleAttribute += "height: " + height + "px";
                        styleAttribute += this.useImportant ? '!important;' : ';';
                        this.textAreaEl.setAttribute('style', styleAttribute);
                    }
                    parent_1.removeChild(clone);
                }
            };
        /**
         * @private
         * @return {?}
         */
        AutosizeDirective.prototype._getLineHeight = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);
                if (isNaN(lineHeight) && window.getComputedStyle) {
                    /** @type {?} */
                    var styles = window.getComputedStyle(this.textAreaEl);
                    lineHeight = parseInt(styles.lineHeight, 10);
                }
                if (isNaN(lineHeight)) {
                    /** @type {?} */
                    var fontSize = window.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');
                    lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);
                }
                return lineHeight;
            };
        AutosizeDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[autosize]'
                    },] }
        ];
        /** @nocollapse */
        AutosizeDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.NgZone }
            ];
        };
        AutosizeDirective.propDecorators = {
            minRows: [{ type: core.Input }],
            maxRows: [{ type: core.Input }],
            onlyGrow: [{ type: core.Input }],
            useImportant: [{ type: core.Input }],
            onInput: [{ type: core.HostListener, args: ['input', ['$event.target'],] }]
        };
        return AutosizeDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AutosizeModule = /** @class */ (function () {
        function AutosizeModule() {
        }
        AutosizeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [AutosizeDirective],
                        imports: [],
                        exports: [AutosizeDirective]
                    },] }
        ];
        return AutosizeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AutosizeDirective = AutosizeDirective;
    exports.AutosizeModule = AutosizeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dG9zaXplLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LWF1dG9zaXplL2xpYi9hdXRvc2l6ZS5kaXJlY3RpdmUudHMiLCJuZzovL25neC1hdXRvc2l6ZS9saWIvYXV0b3NpemUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgRGlyZWN0aXZlLFxuICAgIElucHV0LFxuICAgIE5nWm9uZSwgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyQ29udGVudENoZWNrZWRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2Zyb21FdmVudCwgUmVwbGF5U3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7ZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IE1BWF9MT09LVVBfUkVUUklFUyA9IDM7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2F1dG9zaXplXSdcbn0pXG5cbmV4cG9ydCBjbGFzcyBBdXRvc2l6ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBBZnRlckNvbnRlbnRDaGVja2VkIHtcbiAgICBASW5wdXQoKSBtaW5Sb3dzOiBudW1iZXI7XG4gICAgQElucHV0KCkgbWF4Um93czogbnVtYmVyO1xuICAgIEBJbnB1dCgpIG9ubHlHcm93ID0gZmFsc2U7XG4gICAgQElucHV0KCkgdXNlSW1wb3J0YW50ID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIHJldHJpZXMgPSAwO1xuICAgIHByaXZhdGUgdGV4dEFyZWFFbDogYW55O1xuXG4gICAgcHJpdmF0ZSBfb2xkQ29udGVudDogc3RyaW5nO1xuICAgIHByaXZhdGUgX29sZFdpZHRoOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIF9kZXN0cm95ZWQkID0gbmV3IFJlcGxheVN1YmplY3QoMSk7XG5cbiAgICBASG9zdExpc3RlbmVyKCdpbnB1dCcsIFsnJGV2ZW50LnRhcmdldCddKVxuICAgIG9uSW5wdXQodGV4dEFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hZGp1c3QoKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgX3pvbmU6IE5nWm9uZVxuICAgICkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGFnTmFtZSAhPT0gJ1RFWFRBUkVBJykge1xuICAgICAgICAgICAgdGhpcy5fZmluZE5lc3RlZFRleHRBcmVhKCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dEFyZWFFbCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy50ZXh0QXJlYUVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB0aGlzLl9vblRleHRBcmVhRm91bmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XG4gICAgICAgIHRoaXMuYWRqdXN0KCk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICB0aGlzLmFkanVzdCh0cnVlKTtcbiAgICB9XG5cbiAgICBfZmluZE5lc3RlZFRleHRBcmVhKCkge1xuICAgICAgICB0aGlzLnRleHRBcmVhRWwgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdURVhUQVJFQScpO1xuXG4gICAgICAgIGlmICghdGhpcy50ZXh0QXJlYUVsICYmIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dEFyZWFFbCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignVEVYVEFSRUEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy50ZXh0QXJlYUVsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXRyaWVzID49IE1BWF9MT09LVVBfUkVUUklFUykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignbmd4LWF1dG9zaXplOiB0ZXh0YXJlYSBub3QgZm91bmQnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJldHJpZXMrKztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmluZE5lc3RlZFRleHRBcmVhKCk7XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGV4dEFyZWFFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICB0aGlzLl9vblRleHRBcmVhRm91bmQoKTtcblxuICAgIH1cblxuICAgIF9vblRleHRBcmVhRm91bmQoKSB7XG4gICAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpXG4gICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95ZWQkKSxcbiAgICAgICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKDIwMCksXG4gICAgICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRqdXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkanVzdCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGp1c3QoaW5wdXRzQ2hhbmdlZCA9IGZhbHNlKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnRleHRBcmVhRWwpIHtcblxuICAgICAgICAgICAgY29uc3QgY3VycmVudFRleHQgPSB0aGlzLnRleHRBcmVhRWwudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBpbnB1dHNDaGFuZ2VkID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgIGN1cnJlbnRUZXh0ID09PSB0aGlzLl9vbGRDb250ZW50ICYmXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0QXJlYUVsLm9mZnNldFdpZHRoID09PSB0aGlzLl9vbGRXaWR0aFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9vbGRDb250ZW50ID0gY3VycmVudFRleHQ7XG4gICAgICAgICAgICB0aGlzLl9vbGRXaWR0aCA9IHRoaXMudGV4dEFyZWFFbC5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgICAgY29uc3QgY2xvbmUgPSB0aGlzLnRleHRBcmVhRWwuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy50ZXh0QXJlYUVsLnBhcmVudE5vZGU7XG4gICAgICAgICAgICBjbG9uZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuXG4gICAgICAgICAgICBjbG9uZS5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgICAgICAgICAgIGNsb25lLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcblxuICAgICAgICAgICAgbGV0IGhlaWdodCA9IGNsb25lLnNjcm9sbEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IHdpbGxHcm93ID0gaGVpZ2h0ID4gdGhpcy50ZXh0QXJlYUVsLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRoaXMub25seUdyb3cgPT09IGZhbHNlIHx8IHdpbGxHcm93KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUhlaWdodCA9IHRoaXMuX2dldExpbmVIZWlnaHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3dzQ291bnQgPSBoZWlnaHQgLyBsaW5lSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlQXR0cmlidXRlID0gJyc7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5taW5Sb3dzICYmIHRoaXMubWluUm93cyA+PSByb3dzQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5taW5Sb3dzICogbGluZUhlaWdodDtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXhSb3dzICYmIHRoaXMubWF4Um93cyA8PSByb3dzQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5tYXhSb3dzICogbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVBdHRyaWJ1dGUgKz0gJ292ZXJmbG93OiBhdXRvOyc7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZUF0dHJpYnV0ZSArPSAnb3ZlcmZsb3c6IGhpZGRlbjsnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0eWxlQXR0cmlidXRlICs9IGBoZWlnaHQ6ICR7aGVpZ2h0fXB4YDtcblxuICAgICAgICAgICAgICAgIHN0eWxlQXR0cmlidXRlICs9IHRoaXMudXNlSW1wb3J0YW50ID8gJyFpbXBvcnRhbnQ7JyA6ICc7JztcblxuICAgICAgICAgICAgICAgIHRoaXMudGV4dEFyZWFFbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZ2V0TGluZUhlaWdodCgpIHtcbiAgICAgICAgbGV0IGxpbmVIZWlnaHQgPSBwYXJzZUludCh0aGlzLnRleHRBcmVhRWwuc3R5bGUubGluZUhlaWdodCwgMTApO1xuICAgICAgICBpZiAoaXNOYU4obGluZUhlaWdodCkgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMudGV4dEFyZWFFbCk7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gcGFyc2VJbnQoc3R5bGVzLmxpbmVIZWlnaHQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc05hTihsaW5lSGVpZ2h0KSkge1xuICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnRleHRBcmVhRWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpO1xuICAgICAgICAgICAgbGluZUhlaWdodCA9IE1hdGguZmxvb3IocGFyc2VJbnQoZm9udFNpemUucmVwbGFjZSgncHgnLCAnJyksIDEwKSAqIDEuNSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGluZUhlaWdodDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0b3NpemVEaXJlY3RpdmUgfSBmcm9tICcuL2F1dG9zaXplLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0F1dG9zaXplRGlyZWN0aXZlXSxcbiAgaW1wb3J0czogW1xuICBdLFxuICBleHBvcnRzOiBbQXV0b3NpemVEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIEF1dG9zaXplTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIlJlcGxheVN1YmplY3QiLCJmcm9tRXZlbnQiLCJ0YWtlVW50aWwiLCJkZWJvdW5jZVRpbWUiLCJkaXN0aW5jdFVudGlsQ2hhbmdlZCIsIkRpcmVjdGl2ZSIsIkVsZW1lbnRSZWYiLCJOZ1pvbmUiLCJJbnB1dCIsIkhvc3RMaXN0ZW5lciIsIk5nTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUFXTSxrQkFBa0IsR0FBRyxDQUFDO0FBRTVCO1FBdUJJLDJCQUNXLE9BQW1CLEVBQ2xCLEtBQWE7WUFEZCxZQUFPLEdBQVAsT0FBTyxDQUFZO1lBQ2xCLFVBQUssR0FBTCxLQUFLLENBQVE7WUFsQmhCLGFBQVEsR0FBRyxLQUFLLENBQUM7WUFDakIsaUJBQVksR0FBRyxLQUFLLENBQUM7WUFFdEIsWUFBTyxHQUFHLENBQUMsQ0FBQztZQU1aLGdCQUFXLEdBQUcsSUFBSUEsa0JBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQVd2QyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBSyxVQUFVLEVBQUU7Z0JBQ25ELElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2FBRTlCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7Z0JBQzFD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