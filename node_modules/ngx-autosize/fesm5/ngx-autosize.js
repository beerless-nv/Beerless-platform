import { ElementRef, HostListener, Directive, Input, NgZone, NgModule } from '@angular/core';
import { fromEvent, ReplaySubject } from 'rxjs';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MAX_LOOKUP_RETRIES = 3;
var AutosizeDirective = /** @class */ (function () {
    function AutosizeDirective(element, _zone) {
        this.element = element;
        this._zone = _zone;
        this.onlyGrow = false;
        this.useImportant = false;
        this.retries = 0;
        this._destroyed$ = new ReplaySubject(1);
        if (this.element.nativeElement.tagName !== 'TEXTAREA') {
            this._findNestedTextArea();
        }
        else {
            this.textAreaEl = this.element.nativeElement;
            this.textAreaEl.style.overflow = 'hidden';
            this._onTextAreaFound();
        }
    }
    /**
     * @param {?} textArea
     * @return {?}
     */
    AutosizeDirective.prototype.onInput = /**
     * @param {?} textArea
     * @return {?}
     */
    function (textArea) {
        this.adjust();
    };
    /**
     * @return {?}
     */
    AutosizeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    };
    /**
     * @return {?}
     */
    AutosizeDirective.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.adjust();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AutosizeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.adjust(true);
    };
    /**
     * @return {?}
     */
    AutosizeDirective.prototype._findNestedTextArea = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');
        if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {
            this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');
        }
        if (!this.textAreaEl) {
            if (this.retries >= MAX_LOOKUP_RETRIES) {
                console.warn('ngx-autosize: textarea not found');
            }
            else {
                this.retries++;
                setTimeout(function () {
                    _this._findNestedTextArea();
                }, 100);
            }
            return;
        }
        this.textAreaEl.style.overflow = 'hidden';
        this._onTextAreaFound();
    };
    /**
     * @return {?}
     */
    AutosizeDirective.prototype._onTextAreaFound = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            fromEvent(window, 'resize')
                .pipe(takeUntil(_this._destroyed$), debounceTime(200), distinctUntilChanged())
                .subscribe(function () {
                _this._zone.run(function () {
                    _this.adjust();
                });
            });
        });
        setTimeout(function () {
            _this.adjust();
        });
    };
    /**
     * @param {?=} inputsChanged
     * @return {?}
     */
    AutosizeDirective.prototype.adjust = /**
     * @param {?=} inputsChanged
     * @return {?}
     */
    function (inputsChanged) {
        if (inputsChanged === void 0) { inputsChanged = false; }
        if (this.textAreaEl) {
            /** @type {?} */
            var currentText = this.textAreaEl.value;
            if (inputsChanged === false &&
                currentText === this._oldContent &&
                this.textAreaEl.offsetWidth === this._oldWidth) {
                return;
            }
            this._oldContent = currentText;
            this._oldWidth = this.textAreaEl.offsetWidth;
            /** @type {?} */
            var clone = this.textAreaEl.cloneNode(true);
            /** @type {?} */
            var parent_1 = this.textAreaEl.parentNode;
            clone.style.visibility = 'hidden';
            parent_1.appendChild(clone);
            clone.style.overflow = 'auto';
            clone.style.height = 'auto';
            /** @type {?} */
            var height = clone.scrollHeight;
            /** @type {?} */
            var willGrow = height > this.textAreaEl.offsetHeight;
            if (this.onlyGrow === false || willGrow) {
                /** @type {?} */
                var lineHeight = this._getLineHeight();
                /** @type {?} */
                var rowsCount = height / lineHeight;
                /** @type {?} */
                var styleAttribute = '';
                if (this.minRows && this.minRows >= rowsCount) {
                    height = this.minRows * lineHeight;
                }
                else if (this.maxRows && this.maxRows <= rowsCount) {
                    height = this.maxRows * lineHeight;
                    styleAttribute += 'overflow: auto;';
                }
                else {
                    styleAttribute += 'overflow: hidden;';
                }
                styleAttribute += "height: " + height + "px";
                styleAttribute += this.useImportant ? '!important;' : ';';
                this.textAreaEl.setAttribute('style', styleAttribute);
            }
            parent_1.removeChild(clone);
        }
    };
    /**
     * @private
     * @return {?}
     */
    AutosizeDirective.prototype._getLineHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);
        if (isNaN(lineHeight) && window.getComputedStyle) {
            /** @type {?} */
            var styles = window.getComputedStyle(this.textAreaEl);
            lineHeight = parseInt(styles.lineHeight, 10);
        }
        if (isNaN(lineHeight)) {
            /** @type {?} */
            var fontSize = window.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');
            lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);
        }
        return lineHeight;
    };
    AutosizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[autosize]'
                },] }
    ];
    /** @nocollapse */
    AutosizeDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    AutosizeDirective.propDecorators = {
        minRows: [{ type: Input }],
        maxRows: [{ type: Input }],
        onlyGrow: [{ type: Input }],
        useImportant: [{ type: Input }],
        onInput: [{ type: HostListener, args: ['input', ['$event.target'],] }]
    };
    return AutosizeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AutosizeModule = /** @class */ (function () {
    function AutosizeModule() {
    }
    AutosizeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AutosizeDirective],
                    imports: [],
                    exports: [AutosizeDirective]
                },] }
    ];
    return AutosizeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AutosizeDirective, AutosizeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dG9zaXplLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtYXV0b3NpemUvbGliL2F1dG9zaXplLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmd4LWF1dG9zaXplL2xpYi9hdXRvc2l6ZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBEaXJlY3RpdmUsXG4gICAgSW5wdXQsXG4gICAgTmdab25lLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJDb250ZW50Q2hlY2tlZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7ZnJvbUV2ZW50LCBSZXBsYXlTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgTUFYX0xPT0tVUF9SRVRSSUVTID0gMztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbYXV0b3NpemVdJ1xufSlcblxuZXhwb3J0IGNsYXNzIEF1dG9zaXplRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyQ29udGVudENoZWNrZWQge1xuICAgIEBJbnB1dCgpIG1pblJvd3M6IG51bWJlcjtcbiAgICBASW5wdXQoKSBtYXhSb3dzOiBudW1iZXI7XG4gICAgQElucHV0KCkgb25seUdyb3cgPSBmYWxzZTtcbiAgICBASW5wdXQoKSB1c2VJbXBvcnRhbnQgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgcmV0cmllcyA9IDA7XG4gICAgcHJpdmF0ZSB0ZXh0QXJlYUVsOiBhbnk7XG5cbiAgICBwcml2YXRlIF9vbGRDb250ZW50OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfb2xkV2lkdGg6IG51bWJlcjtcblxuICAgIHByaXZhdGUgX2Rlc3Ryb3llZCQgPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQudGFyZ2V0J10pXG4gICAgb25JbnB1dCh0ZXh0QXJlYTogSFRNTFRleHRBcmVhRWxlbWVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkanVzdCgpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBfem9uZTogTmdab25lXG4gICAgKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC50YWdOYW1lICE9PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgICAgICB0aGlzLl9maW5kTmVzdGVkVGV4dEFyZWEoKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50ZXh0QXJlYUVsID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLnRleHRBcmVhRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIHRoaXMuX29uVGV4dEFyZWFGb3VuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkJC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpIHtcbiAgICAgICAgdGhpcy5hZGp1c3QoKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuYWRqdXN0KHRydWUpO1xuICAgIH1cblxuICAgIF9maW5kTmVzdGVkVGV4dEFyZWEoKSB7XG4gICAgICAgIHRoaXMudGV4dEFyZWFFbCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1RFWFRBUkVBJyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnRleHRBcmVhRWwgJiYgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0QXJlYUVsID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdURVhUQVJFQScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnRleHRBcmVhRWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJldHJpZXMgPj0gTUFYX0xPT0tVUF9SRVRSSUVTKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCduZ3gtYXV0b3NpemU6IHRleHRhcmVhIG5vdCBmb3VuZCcpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmV0cmllcysrO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5kTmVzdGVkVGV4dEFyZWEoKTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50ZXh0QXJlYUVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgIHRoaXMuX29uVGV4dEFyZWFGb3VuZCgpO1xuXG4gICAgfVxuXG4gICAgX29uVGV4dEFyZWFGb3VuZCgpIHtcbiAgICAgICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJylcbiAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCQpLFxuICAgICAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUoMjAwKSxcbiAgICAgICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGp1c3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRqdXN0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkanVzdChpbnB1dHNDaGFuZ2VkID0gZmFsc2UpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dEFyZWFFbCkge1xuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VGV4dCA9IHRoaXMudGV4dEFyZWFFbC52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGlucHV0c0NoYW5nZWQgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgY3VycmVudFRleHQgPT09IHRoaXMuX29sZENvbnRlbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnRleHRBcmVhRWwub2Zmc2V0V2lkdGggPT09IHRoaXMuX29sZFdpZHRoXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX29sZENvbnRlbnQgPSBjdXJyZW50VGV4dDtcbiAgICAgICAgICAgIHRoaXMuX29sZFdpZHRoID0gdGhpcy50ZXh0QXJlYUVsLm9mZnNldFdpZHRoO1xuXG4gICAgICAgICAgICBjb25zdCBjbG9uZSA9IHRoaXMudGV4dEFyZWFFbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnRleHRBcmVhRWwucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGNsb25lLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjbG9uZSk7XG5cbiAgICAgICAgICAgIGNsb25lLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xuICAgICAgICAgICAgY2xvbmUuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuXG4gICAgICAgICAgICBsZXQgaGVpZ2h0ID0gY2xvbmUuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgd2lsbEdyb3cgPSBoZWlnaHQgPiB0aGlzLnRleHRBcmVhRWwub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vbmx5R3JvdyA9PT0gZmFsc2UgfHwgd2lsbEdyb3cpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gdGhpcy5fZ2V0TGluZUhlaWdodCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvd3NDb3VudCA9IGhlaWdodCAvIGxpbmVIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3R5bGVBdHRyaWJ1dGUgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pblJvd3MgJiYgdGhpcy5taW5Sb3dzID49IHJvd3NDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLm1pblJvd3MgKiBsaW5lSGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1heFJvd3MgJiYgdGhpcy5tYXhSb3dzIDw9IHJvd3NDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLm1heFJvd3MgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBzdHlsZUF0dHJpYnV0ZSArPSAnb3ZlcmZsb3c6IGF1dG87JztcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlQXR0cmlidXRlICs9ICdvdmVyZmxvdzogaGlkZGVuOyc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3R5bGVBdHRyaWJ1dGUgKz0gYGhlaWdodDogJHtoZWlnaHR9cHhgO1xuXG4gICAgICAgICAgICAgICAgc3R5bGVBdHRyaWJ1dGUgKz0gdGhpcy51c2VJbXBvcnRhbnQgPyAnIWltcG9ydGFudDsnIDogJzsnO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0QXJlYUVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZUF0dHJpYnV0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRMaW5lSGVpZ2h0KCkge1xuICAgICAgICBsZXQgbGluZUhlaWdodCA9IHBhcnNlSW50KHRoaXMudGV4dEFyZWFFbC5zdHlsZS5saW5lSGVpZ2h0LCAxMCk7XG4gICAgICAgIGlmIChpc05hTihsaW5lSGVpZ2h0KSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy50ZXh0QXJlYUVsKTtcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSBwYXJzZUludChzdHlsZXMubGluZUhlaWdodCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTmFOKGxpbmVIZWlnaHQpKSB7XG4gICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMudGV4dEFyZWFFbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1zaXplJyk7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gTWF0aC5mbG9vcihwYXJzZUludChmb250U2l6ZS5yZXBsYWNlKCdweCcsICcnKSwgMTApICogMS41KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaW5lSGVpZ2h0O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRvc2l6ZURpcmVjdGl2ZSB9IGZyb20gJy4vYXV0b3NpemUuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbQXV0b3NpemVEaXJlY3RpdmVdLFxuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGV4cG9ydHM6IFtBdXRvc2l6ZURpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgQXV0b3NpemVNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtJQVdNLGtCQUFrQixHQUFHLENBQUM7QUFFNUI7SUF1QkksMkJBQ1csT0FBbUIsRUFDbEIsS0FBYTtRQURkLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQWxCaEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUV0QixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBTVosZ0JBQVcsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQVd2QyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBSyxVQUFVLEVBQUU7WUFDbkQsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FFOUI7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUMxQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUMzQjtLQUNKOzs7OztJQWhCRCxtQ0FBTzs7OztJQURQLFVBQ1EsUUFBNkI7UUFDakMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ2pCOzs7O0lBZ0JELHVDQUFXOzs7SUFBWDtRQUNJLElBQUksQ0FBQyxXQUFXLENBQUMs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